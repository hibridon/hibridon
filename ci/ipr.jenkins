// Jenkinsfile for jenkins.ipr.univ-rennes1.fr (Institut de Physique de Rennes)
pipeline {
    agent {label 'physix_agent'}
    environment {
        HIBRIDON_ROOT_PATH = "${WORKSPACE}"
        HIBRIDON_BUILD_ROOT_PATH = "${WORKSPACE}/build"
    }
    stages {
        stage('Build and test hibridon...') {
            matrix {
                axes {
                    axis {
                        name 'COMPILER'
                        values 'gfortran', 'ifort'
                    }                   
                    axis {
                        name 'BUILD_TYPE'
                        values 'Debug', 'Release'
                    }                   
                }
                stages {
                    stage('Building hibridon') {
                        steps {
                            sh "echo $SHELL"
                            sh '''#!/bin/bash
                                echo "hello world"
                                echo HIBRIDON_ROOT_PATH=${HIBRIDON_ROOT_PATH}
                                ls ${HIBRIDON_ROOT_PATH}
                            '''
                            sh "rm -Rf ${HIBRIDON_BUILD_ROOT_PATH}/${COMPILER}/${BUILD_TYPE}"
                            sh "mkdir -p ${HIBRIDON_BUILD_ROOT_PATH}/${COMPILER}/${BUILD_TYPE}"
                            sh '''#!/bin/bash
                                echo "building for compiler ${COMPILER} and build type ${BUILD_TYPE}" &&
                                cd ${HIBRIDON_BUILD_ROOT_PATH}/${COMPILER}/${BUILD_TYPE} &&
                                echo "current directory : $(pwd)" &&
                                if [ "${COMPILER}" = 'ifort' ]
                                then
                                    . /etc/profile.d/modules.sh &&
                                    module load compilers/ifort/latest &&
                                    which ifort
                                    cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_TESTING=ON -DCMAKE_Fortran_COMPILER=ifort -DBLA_VENDOR=Intel10_64lp "$HIBRIDON_ROOT_PATH"
                                elif [ "${COMPILER}" = 'gfortran' ]
                                then
                                    cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_TESTING=ON "$HIBRIDON_ROOT_PATH"
                                fi &&
                                make
                                '''
                        }
                    }
                    stage('Testing hibridon') {
                        steps {
                            sh '''#!/bin/bash
                                echo "testing for compiler ${COMPILER} and build type ${BUILD_TYPE}" &&
                                cd ${HIBRIDON_BUILD_ROOT_PATH}/${COMPILER}/${BUILD_TYPE} &&
                                echo "current directory : $(pwd)" &&
                                if [ "${COMPILER}" = 'ifort' ]
                                then
                                    . /etc/profile.d/modules.sh &&
                                    module load compilers/ifort/latest &&
                                    which ifort
                                fi
                                ctest --output-on-failure  -L coverage
                                '''
                        }
                    }
                }                
            }
        }
        stage('Cleaning up...') {
            steps {
                echo 'Cleaning workspace...'
                sh 'git clean -d -x -f'
                // will remove untracked files, including directories (-d) and files ignored by git (-x). Replace the -f argument with -n to perform a dry-run or -i for interactive mode, and it will tell you what will be removed.'
            }
        }        
    }
    post
    {
        // always, success, failure, unstable, changed
        success
        {
            // mail bcc: '', body: "<b>Example</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "foo@foomail.com";
            mail bcc: '', body: "<b>Example</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br>Build URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "CI build succeeded for ${env.JOB_NAME}", to: "guillaume.raffy@univ-rennes1.fr, benjamin.desrousseaux@univ-rennes1.fr, francois.lique@univ-rennes1.fr";
        }
        failure
        {
            // mail bcc: '', body: "<b>Example</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "foo@foomail.com";
            mail bcc: '', body: "<b>Example</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br>Build URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "CI build failed for ${env.JOB_NAME}", to: "guillaume.raffy@univ-rennes1.fr, benjamin.desrousseaux@univ-rennes1.fr, francois.lique@univ-rennes1.fr";
        }
    }
}