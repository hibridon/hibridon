*  System:  OH+ - H
*
*   calculation of potential energy curves using program provided
*   by f. lique
*   used hyperbolic tangent switching function to damp strongly
*   repulsived points
*   fitted to lam = 0:8 
*  
*   written by p. dagdigian
*   current revision date:  18-jan-2018
      include "common/syusr"
      include "common/bausr"
      include "common/ground"
* ------------------------------------------------------------------------
      subroutine driver
      implicit double precision (a-h,o-z)
      common /covvl/ vvl(36)
      include "common/parpot"
      econv=219474.6d0
      potnam='OH+-H quartet PES'
      print *, potnam
1     print *, 'R (bohr):'
      read (5, *, end=99) r
      call pot(vv0,r)
      if (r.le.0.d0) goto 99
*     vlm coefficient is returned in atomic units (hartree)
*     convert from atomic units for printout
      write (6, 100) vv0*econv, (econv*vvl(i), i=1,8)
100   format(9(1pe16.8))
      goto 1
99    rr=3.0d0
      dr=0.1d0
      open (unit=12,file='ohph_vlms.dat')
      write(12,109)
109   format(' %R/bohr V00  ...')
      do i=1,600
        call pot(vv0,rr)
        write (12,110) rr,vv0*econv, (econv*vvl(j),j=1,36)
110     format(f7.2,9(1pe16.8))
        rr = rr + dr
      enddo
      close(12)
      end
* --------------------------------------------------------------------------
      subroutine loapot(iunit,filnam)
* --------------------------------------------------------------------------
      implicit double precision (a-h,o-z)
      character*(*) filnam
      include "common/parbas"
      include "common/parpot" 
      common /conlam/ nlam, nlammx, lamnum(2)
      common /cosysi/ nscode, isicod, nterm
      potnam='OH+-H quartet PES'
      npot=1
      nterm=1
      lammin(1)=1
      lammax(1)=8
      mproj(1)=0
      ipotsy = 1
*
      ntv(1)=1
      ivcol(1,1)=0
      ivrow(1,1)=0
*  count number of anisotropic terms
      nlam = 0
      do il=lammin(1),lammax(1)
        nlam = nlam + 1
      enddo
      nlammx = nlam
      return
      end
* --------------------------------------------------------------------------
      subroutine pot (vv0, r)


*  subroutine to calculate the r-dependent coefficients in the
*  collision of a homonuclear diatomic with a structureless target
*  in units of hartree for energy and bohr for distance

*  on return:
*  vv0 contains the isotropic term (n=0) in the potential
*  the coefficients for each angular term in the coupling potential
*  [ vvl(i) for i = 1, nlam ] are returned in common block /covvl/

*  variable in common block /conlam/
*    nlammx:    the maximum number of anisotropic terms
*    nlam:      the total number of angular coupling terms
*  variable in common block /covvl/
*    vvl        array to store r-dependence of each angular term in the
*               potential
* 
* author:  paul dagdigian
* latest revision date:  18-jan-2018
* ----------------------------------------------------------------------
      implicit double precision (a-h,o-z)
      logical ljunk, ihomo, csflag, lljunk
      include "common/parbas"
      dimension v(49)
      dimension csplin(49,9)
      dimension rr(49), vl(441),vec(49)
      common /colpar/ ljunk(5),csflag,lljunk(2),ihomo
      common /covvl/ vvl(8)
*
* r values= 49
      data rr /
     +  1.500,  1.750,  2.000,  2.250,  2.500,
     +  2.750,  3.000,  3.250,  3.500,  3.750,
     +  4.000,  4.250,  4.500,  4.750,  5.000,
     +  5.250,  5.500,  5.750,  6.000,  6.250,
     +  6.500,  6.750,  7.000,  7.500,  8.000,
     +  8.500,  9.000,  9.500, 10.000, 11.000,
     + 12.000, 13.000, 14.000, 15.000, 16.000,
     + 17.000, 18.000, 19.000, 20.000, 21.000,
     + 22.000, 23.000, 24.000, 25.000, 26.000,
     + 27.000, 28.000, 29.000, 30.000 /
* vlam = 0 : 36
      data vl /  
     +  2.7066397e+04,  2.3622760e+04,  2.0929170e+04,  1.8500771e+04,
     +  1.6131151e+04,  1.3732071e+04,  1.1301683e+04,  8.9202129e+03,
     +  6.7287165e+03,  4.8885899e+03,  3.4683260e+03,  2.4286147e+03,
     +  1.6911128e+03,  1.1764025e+03,  8.1749364e+02,  5.6258729e+02,
     +  3.7487360e+02,  2.3077619e+02,  1.1694673e+02,  2.6806503e+01,
     + -4.2573069e+01, -9.2781576e+01, -1.2543962e+02, -1.4754012e+02,
     + -1.3182420e+02, -1.0072739e+02, -6.9208657e+01, -4.4008475e+01,
     + -2.6393290e+01, -8.3667441e+00, -2.3600077e+00, -6.1468036e-01,
     + -1.5095562e-01, -3.5391193e-02, -7.9840019e-03, -1.7427347e-03,
     + -3.6963378e-04, -7.6445493e-05, -1.5461654e-05, -3.0661495e-06,
     + -5.9747645e-07, -1.1463545e-07, -2.1689513e-08, -4.0520471e-09,
     + -7.4484075e-10, -1.3413773e-10, -2.4976005e-11, -4.4805799e-12,
     + -7.8512668e-13, 
     + -2.0192915e+04, -2.4183213e+04, -2.6269536e+04, -2.7051851e+04,
     + -2.6718253e+04, -2.5317028e+04, -2.2915721e+04, -1.9726663e+04,
     + -1.6160412e+04, -1.2771834e+04, -9.9150323e+03, -7.6433135e+03,
     + -5.8811473e+03, -4.5241080e+03, -3.4747472e+03, -2.6516722e+03,
     + -1.9926260e+03, -1.4549001e+03, -1.0123894e+03, -6.5063399e+02,
     + -3.6159870e+02, -1.3946126e+02,  2.2008402e+01,  1.9501606e+02,
     +  2.3037426e+02,  1.9739370e+02,  1.4405565e+02,  9.4910539e+01,
     +  5.8175722e+01,  1.8827538e+01,  5.3289661e+00,  1.3799139e+00,
     +  3.3536595e-01,  7.7683646e-02,  1.7319342e-02,  3.7409383e-03,
     +  7.8653470e-04,  1.6154321e-04,  3.2502857e-05,  6.4213780e-06,
     +  1.2481270e-06,  2.3909155e-07,  4.5201237e-08,  8.4429803e-09,
     +  1.5579158e-09,  2.8226439e-10,  5.2027167e-11,  9.4388938e-12,
     +  1.7333206e-12, 
     + -3.9834348e+03, -2.5932569e+03, -2.2091929e+02,  2.7879643e+03,
     +  5.9714455e+03,  8.7784494e+03,  1.0653181e+04,  1.1216298e+04,
     +  1.0533326e+04,  9.2050481e+03,  7.7788667e+03,  6.4583100e+03,
     +  5.2895066e+03,  4.2772635e+03,  3.4175719e+03,  2.6980699e+03,
     +  2.0996342e+03,  1.6019264e+03,  1.1877353e+03,  8.4465338e+02,
     +  5.6446090e+02,  3.4138796e+02,  1.7031836e+02, -3.9307492e+01,
     + -1.1894755e+02, -1.2484321e+02, -1.0009429e+02, -6.9696210e+01,
     + -4.4313371e+01, -1.5004865e+01, -4.3591724e+00, -1.1469286e+00,
     + -2.8151161e-01, -6.5608890e-02, -1.4683016e-02, -3.1792897e-03,
     + -6.6961036e-04, -1.3772334e-04, -2.7746838e-05, -5.4891114e-06,
     + -1.0684340e-06, -2.0496924e-07, -3.8811089e-08, -7.2622311e-09,
     + -1.3469681e-09, -2.4508531e-10, -4.4808753e-11, -8.0265385e-12,
     + -1.5359628e-12, 
     +  6.1040471e+03,  7.9269401e+03,  8.7143819e+03,  8.3028333e+03,
     +  6.5468417e+03,  3.6610599e+03,  3.6392272e+02, -2.3541939e+03,
     + -3.8567225e+03, -4.3881854e+03, -4.4498966e+03, -4.2627799e+03,
     + -3.9072028e+03, -3.4403442e+03, -2.9236505e+03, -2.4104702e+03,
     + -1.9360301e+03, -1.5181375e+03, -1.1621221e+03, -8.6613157e+02,
     + -6.2509893e+02, -4.3297126e+02, -2.8363547e+02, -8.9559759e+01,
     +  3.1887937e+00,  3.5529058e+01,  3.8231655e+01,  3.0146995e+01,
     +  2.0531597e+01,  7.4833091e+00,  2.2603724e+00,  6.0932438e-01,
     +  1.5205778e-01,  3.5865538e-02,  8.0990720e-03,  1.7659399e-03,
     +  3.7400998e-04,  7.7277637e-05,  1.5629224e-05,  3.1022718e-06,
     +  6.0564001e-07,  1.1649267e-07,  2.2112114e-08,  4.1504499e-09,
     +  7.7340313e-10,  1.4094142e-10,  2.5671806e-11,  4.5661041e-12,
     +  8.1659248e-13, 
     +  1.4096447e+03,  1.2278579e+02, -1.7109961e+03, -3.6333608e+03,
     + -4.9113144e+03, -4.8744860e+03, -3.4754641e+03, -1.5365968e+03,
     + -9.2545683e+01,  7.0536115e+02,  1.1932940e+03,  1.5123317e+03,
     +  1.6770007e+03,  1.6910926e+03,  1.5854918e+03,  1.4049330e+03,
     +  1.1904699e+03,  9.7254514e+02,  7.7015245e+02,  5.9292010e+02,
     +  4.4406288e+02,  3.2302776e+02,  2.2735933e+02,  9.8909868e+01,
     +  3.1760064e+01,  2.1381066e+00, -7.6282921e+00, -8.6438211e+00,
     + -6.7635386e+00, -2.7717190e+00, -8.8107157e-01, -2.4439956e-01,
     + -6.2130745e-02, -1.4848318e-02, -3.3862002e-03, -7.4402520e-04,
     + -1.5855022e-04, -3.2925217e-05, -6.6871669e-06, -1.3321159e-06,
     + -2.6086766e-07, -5.0310305e-08, -9.5733584e-09, -1.8065184e-09,
     + -3.3710090e-10, -6.1506476e-11, -1.1191138e-11, -2.0888377e-12,
     + -3.2687980e-13, 
     + -2.5162325e+03, -3.5068844e+03, -3.5641233e+03, -2.5976005e+03,
     + -9.1797815e+02,  6.4081927e+02,  1.2612541e+03,  9.5501470e+02,
     +  5.6743709e+02,  4.6089217e+02,  3.9775981e+02,  2.6846883e+02,
     +  9.7697223e+01, -5.9378603e+01, -1.7141403e+02, -2.3392724e+02,
     + -2.5505233e+02, -2.4701807e+02, -2.2155144e+02, -1.8788428e+02,
     + -1.5234295e+02, -1.1878344e+02, -8.9240428e+01, -4.4790629e+01,
     + -1.8415067e+01, -5.1617418e+00,  2.6283610e-01,  1.7978187e+00,
     +  1.7687732e+00,  8.3923368e-01,  2.8168596e-01,  8.0371806e-02,
     +  2.0792093e-02,  5.0293797e-03,  1.1572542e-03,  2.5603657e-04,
     +  5.4861015e-05,  1.1443585e-05,  2.3327834e-06,  4.6613378e-07,
     +  9.1520924e-08,  1.7691275e-08,  3.3741765e-09,  6.3885233e-10,
     +  1.1859305e-10,  2.1761059e-11,  3.8645572e-12,  8.1743700e-13,
     +  1.4153268e-13, 
     + -4.3332207e+02,  4.2194716e+02,  1.4903081e+03,  2.2282326e+03,
     +  2.1390191e+03,  1.3224796e+03,  5.6547345e+02,  4.3279867e+02,
     +  4.7534336e+02,  3.0266358e+02,  8.3463347e+01, -5.6406097e+01,
     + -1.0328805e+02, -9.4578566e+01, -6.5095330e+01, -3.2933263e+01,
     + -6.3480964e+00,  1.2047719e+01,  2.2614633e+01,  2.6986265e+01,
     +  2.7073646e+01,  2.4558328e+01,  2.0734903e+01,  1.2464447e+01,
     +  6.0419412e+00,  2.2107204e+00,  3.8643451e-01, -2.7105056e-01,
     + -3.9055710e-01, -2.1880562e-01, -7.7453217e-02, -2.2679782e-02,
     + -5.9584688e-03, -1.4562865e-03, -3.3760688e-04, -7.5117880e-05,
     + -1.6166606e-05, -3.3840229e-06, -6.9179303e-07, -1.3855463e-07,
     + -2.7250572e-08, -5.2788782e-09, -1.0098917e-09, -1.9018446e-10,
     + -3.3732890e-11, -6.5149265e-12, -1.2744843e-12, -3.1094973e-13,
     + -3.1128310e-14, 
     +  8.3670222e+02,  1.1892669e+03,  1.0379698e+03,  4.4590362e+02,
     + -1.9187195e+02, -3.5556734e+02, -9.1573537e+01, -1.0993604e+02,
     + -3.6541816e+02, -3.7035819e+02, -2.4463497e+02, -1.1474330e+02,
     + -3.1858814e+01,  5.3173576e+00,  1.8757179e+01,  2.0485530e+01,
     +  1.7040090e+01,  1.1968298e+01,  7.0961226e+00,  3.2001666e+00,
     +  4.7554500e-01, -1.1837308e+00, -1.9997412e+00, -2.0693800e+00,
     + -1.3185468e+00, -5.9974420e-01, -1.6575789e-01,  2.4027089e-02,
     +  7.6352764e-02,  5.1623578e-02,  1.9281623e-02,  5.7880547e-03,
     +  1.5423547e-03,  3.8038690e-04,  8.8732289e-05,  1.9831782e-05,
     +  4.2823464e-06,  8.9861350e-07,  1.8405152e-07,  3.6920834e-08,
     +  7.2626304e-09,  1.4151772e-09,  2.7058888e-10,  4.8690738e-11,
     +  6.9014242e-12,  1.8878312e-12,  2.8911812e-13,  1.3331335e-14,
     + -3.4694941e-14, 
     +  9.8943915e+01, -3.0632898e+02, -7.3699549e+02, -8.7210382e+02,
     + -6.1057853e+02, -3.0958342e+02, -3.0500191e+02, -2.1038818e+02,
     +  7.2269346e+01,  1.6339748e+02,  1.4003240e+02,  8.3439250e+01,
     +  3.7235163e+01,  1.4252381e+01,  3.1512341e+00, -1.9146491e+00,
     + -3.7997255e+00, -4.0353702e+00, -3.4834098e+00, -2.6410566e+00,
     + -1.7902702e+00, -1.0705167e+00, -5.3214911e-01,  3.6194487e-02,
     +  1.5641454e-01,  1.0655025e-01,  3.9594490e-02,  6.4555597e-04,
     + -1.3160451e-02, -1.0762138e-02, -4.2280569e-03, -1.2979918e-03,
     + -3.5011976e-04, -8.6988556e-05, -2.0382119e-05, -4.5691924e-06,
     + -9.8865702e-07, -2.0774936e-07, -4.2588018e-08, -8.5471328e-09,
     + -1.6796574e-09, -3.3137141e-10, -6.0578615e-11, -8.3470607e-12,
     + -7.8881080e-13, -3.0904493e-13, -6.0102970e-15,  7.4760055e-14,
     +  2.3749390e-14  /
*
* spline fit
      if (ifirst .eq. 0) then
* spline fit of the vl coefficients
         ind=1
         do ilam=1,9
           call dcopy(49,vl(ind),1,vec,1)
*    evaluate derivative at first point
           der1=(vec(2)-vec(1))/(rr(2)-rr(1))
           call dspline(rr,vec,49,der1,0d0,csplin(1,ilam))
           ind = ind + 49
         enddo
         ifirst = 1
       end if
* switching function for long-range
       switch_lr=0.5*(tanh(0.5*(r - 18.d0)) + 1.d0)
* determine splined coefficients at R=r
       ind=1
       do ilam=1,9
         call dcopy(49,vl(ind),1,vec,1)
         call dsplint(rr,vec,csplin(1,ilam),33,r,vvx)
* kill anisotropic terms at large R
         vvx = (1.d0 - switch_lr)*vvx
         v(ilam)=vvx
         call dcopy(49,vl(ind),1,vec,1)
         ind = ind + 49
       enddo
       call dcopy(8,v(2),1,vvl(1),1)
* convert to hartree
       econv=1.d0/219474.6d0
       call dscal(8,econv,vvl,1)
* isotropic term 
       vv0 = v(1)*econv
*
       return
       end
*===========================eof===============================
