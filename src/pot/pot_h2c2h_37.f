* System:  C2H(X 2Sigma)+H2, ab initio RCCSD(T) PES's
* BASIS AVQZ Najar - Lique
      subroutine driver
      implicit double precision (a-h,o-z)
      common /cosysr/ xjunk(2),rshift,xfact
      common /covvl/ vvl(37)
      data econv /219474.6315343234d0/
      include "common/parpot"
      potnam='H2-C2H(2Sigma) CCSDT PES'
      print *, potnam
1      print *, ' r (bohr)'
      rshift=0.5
      xfact=0.8
      read (5, *, end=99) r
      if (r .gt.0.d0) then
        call pot(vv0,r)
        write (6, 100) vv0*econv,(vvl(il)*econv,il=1,36)
100     format(' vsum',/,7(1pe16.8))
        goto 1
      else
        open (unit=12,file='h2c2hj0_vlms.dat')
        rr = 4.5d0
        dr = 0.5d0
        do ir=1,30
          call pot(vv0,rr)
          write (12,113) rr,vv0*econv, (econv*vvl(j),j=1,36)
113       format(f7.2,37(1pe16.8))
          rr = rr + dr
        enddo
      endif
99    end
      include "common/syusr"
      include "common/bausr"
      include "common/ground"
* ----------------------------------------------------------------
      subroutine loapot(iunit,filnam)
      character*(*) filnam
      include "common/parbas"
      include "common/parpot"
      potnam='H2-C2H(2Sigma) CCSDT PES'
      lammin(1)=1
      lammax(1)=37
      mproj(1)=0
      ntv(1)=1
      ivcol(1,1)=0
      ivrow(1,1)=0
      return
      end
* ----------------------------------------------------------------------
      subroutine pot (vv0, r)
*  subroutine to calculate the r-dependent coefficients
*  in atomic units (distance and energy)
* ----------------------------------------------------------------------
*  on entry:
*    r:      interparticle distance
*  on return:
*  vv0        contains isotropic term (d00 term in vsum)
*  variable in common block /covvl/
*    vvl:     vector of length 6 to store r-dependence of each term
*             in potential expansion
*    vvl(1-37) expansion coefficients in dl0 (l=1:37) of vsum
* uses linear least squares routines from cmlib
* 0 degree for He-NP and 180 for He-PN
* ----------------------------------------------------------------------
      implicit double precision (a-h,o-z)
      dimension 
     :          vsum(37),
     :          d0(1369),thta(37),
     :          dd0(37,37)
      dimension work(8214)
C     dimension of work is determined by setting LWORK to -1 
C     and looking at the value of work(1)
      common /covvl/ vvl(37)
      data half, zero, one, alph /0.5d0, 0.d0, 1.d0, 1.2d0/
      data lwork /8214/
C     lwork is size of work array for dgels
* coefficicients for d0 rotation matrices
* stored (by column) for each of 13 angles and for l=0:12
* angles are 0:15:180 
* stored (by column) for each of 37 angles and for l=0:36
* angles are 0:5:180 
      data d0/
     :    1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0,
     :    1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0,
     :    1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0,
     :    1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0,
     :    1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0,
     :    1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0, 1.0d0,
     :     1.0d0,                     !l=0
     :    1.0d0,              0.9961946980917457,  0.9848077530122080,
     :   0.9659258262890683,  0.9396926207859084,  0.9063077870366499,
     :   0.8660254037844387,  0.8191520442889918,  0.7660444431189781,
     :   0.7071067811865476,  0.6427876096865394,  0.5735764363510463, 
     :   0.5d0,               0.4226182617406994,  0.3420201433256688,
     :   0.2588190451025208,  0.1736481776669304,  0.0871557427476581,
     :   0.0d0,              -0.0871557427476582, -0.1736481776669303,
     :  -0.2588190451025209, -0.3420201433256688, -0.4226182617406993,
     :  -0.4999999999999998, -0.5735764363510458, -0.6427876096865394,
     :  -0.7071067811865475, -0.7660444431189779, -0.8191520442889916,
     :  -0.8660254037844387, -0.9063077870366499, -0.9396926207859083,
     :  -0.9659258262890683, -0.9848077530122080, -0.9961946980917457,
     :  -1.0d0, !l=1
     :    1.d0,               0.9886058147591562,  0.9547694655894312,
     :   0.8995190528383290,  0.8245333323392336,  0.7320907072649044,
     :   0.625d0,             0.5065151074942517,  0.3802361332501978,
     :   0.25d0,              0.1197638667498023, -0.0065151074942514,
     :  -0.1249999999999998, -0.2320907072649045, -0.3245333323392335,
     :  -0.3995190528383291, -0.4547694655894313, -0.4886058147591560,
     :  -0.5d0,              -0.4886058147591560, -0.4547694655894313,
     :  -0.3995190528383289, -0.3245333323392335, -0.2320907072649046,
     :  -0.125d0,            -0.0065151074942520,  0.1197638667498023,
     :   0.2499999999999999,  0.3802361332501975,  0.5065151074942511,
     :   0.625d0,             0.7320907072649044,  0.8245333323392332,
     :   0.8995190528383289,  0.9547694655894312,  0.9886058147591562,
     :   1.0d0, !l=2 
     :    1.0d0,              0.9772766532150722,  0.9105687847448519,
     :   0.8041639230999929,  0.6648847327947159,  0.5016273233278189,
     :   0.3247595264191646,  0.1454201134192964, -0.0252333338303832,
     :  -0.1767766952966368, -0.3002205237328219, -0.3886124777990253,
     :  -0.4374999999999999, -0.4452217932779054, -0.4130083236181485,
     :  -0.3448845963281469, -0.2473819333749012, -0.1290784996587036,
     :  -0.0d0,               0.1290784996587037,  0.2473819333749011,
     :   0.3448845963281470,  0.4130083236181483,  0.4452217932779054,
     :   0.4375d0,            0.3886124777990256,  0.3002205237328219,
     :   0.1767766952966370,  0.0252333338303836, -0.1454201134192958,
     :  -0.3247595264191646, -0.5016273233278189, -0.6648847327947153,
     :  -0.8041639230999923, -0.9105687847448519, -0.9772766532150722,
     :  -1.0d0, !l=3
     :    1.0d0,              0.9622718248086087,  0.8532094988262867,
     :   0.6846954386826372,  0.4749777356362835,  0.2465322808654405,
     :   0.0234375000000002, -0.1714242600414198, -0.3190043464713779,
     :  -0.4062499999999999, -0.4275344575132094, -0.3851868496199626,
     :  -0.2890625000000002, -0.1552099751886461, -0.0038000413130783,
     :   0.1434295613173630,  0.2659016108350947,  0.3467669791759787,
     :   0.375d0,             0.3467669791759786,  0.2659016108350948,
     :   0.1434295613173627, -0.0038000413130780, -0.1552099751886459,
     :  -0.2890624999999996, -0.3851868496199623, -0.4275344575132094,
     :  -0.4062500000000000, -0.3190043464713782, -0.1714242600414204,
     :   0.0234375000000002,  0.2465322808654405,  0.4749777356362825,
     :   0.6846954386826365,  0.8532094988262867,  0.9622718248086087,
     :   1.0d0, !l=4
     :    1.d0,               0.9436768394232711,  0.7839901651021363,
     :   0.5471258747785941,  0.2714917455512554,  0.0008795679654043,
     :  -0.2232721744131754, -0.3690966502320192, -0.4196820454370537,
     :  -0.3756504775053534, -0.2544885146201274, -0.0867913987225279,
     :   0.0898437499999997,  0.2381072087680474,  0.3280672156803423,
     :   0.3427278208418575,  0.2810175409883088,  0.1576637202617623,
     :   0.d0,               -0.1576637202617625, -0.2810175409883088,
     :  -0.3427278208418575, -0.3280672156803423, -0.2381072087680476,
     :  -0.0898437500000005,  0.0867913987225270,  0.2544885146201274,
     :   0.3756504775053533,  0.4196820454370537,  0.3690966502320195,
     :   0.2232721744131754, -0.0008795679654043, -0.2714917455512543,
     :  -0.5471258747785931, -0.7839901651021363, -0.9436768394232711,
     :  -1.0d0, !l=5
     :    1.d0,               0.9215975635927959,  0.7044713379209200,
     :   0.3983059910104808,  0.0719030017842308, -0.2039821086780316,
     :  -0.3740234374999998, -0.4114479551914090, -0.3235707257109310,
     :  -0.1484375000000001,  0.0563782639178668,  0.2297229558437867,
     :   0.3232421874999999,  0.3138271462325888,  0.2088769606612121,
     :   0.0431002589895194, -0.1321213385732990, -0.2637801017997319,
     :  -0.3125d0,           -0.2637801017997318, -0.1321213385732992,
     :   0.0431002589895196,  0.2088769606612119,  0.3138271462325887,
     :   0.3232421875000001,  0.2297229558437874,  0.0563782639178668,
     :  -0.1484374999999999, -0.3235707257109308, -0.4114479551914088,
     :  -0.3740234374999998, -0.2039821086780316,  0.0719030017842297,
     :   0.3983059910104795,  0.7044713379209200,  0.9215975635927959,
     :   1.0d0, !l=6
     :    0.9999999999999999, 0.8961595499415358,  0.6164362670084927,
     :   0.2455410452290483, -0.1072261586929375, -0.3440849804908796,
     :  -0.4101780476908718, -0.3095599622263244, -0.1006017086295022,
     :   0.1270582497444576,  0.2854344758924738,  0.3190965941467100,
     :   0.2231445312500002,  0.0422192609648440, -0.1485259471122773,
     :  -0.2730499632388201, -0.2834799188134355, -0.1778359543711263,
     :  -0.d0,                0.1778359543711265,  0.2834799188134355,
     :   0.2730499632388200,  0.1485259471122775, -0.0422192609648438,
     :  -0.2231445312499995, -0.3190965941467098, -0.2854344758924738,
     :  -0.1270582497444579,  0.1006017086295019,  0.3095599622263238,
     :   0.4101780476908718,  0.3440849804908796,  0.1072261586929385,
     :  -0.2455410452290469, -0.6164362670084927, -0.8961595499415358,
     :  -0.9999999999999999, !!=7
     :    0.9999999999999999, 0.8675072424113839,  0.5218461074214460,
     :   0.0961843272422357, -0.2518394329592747, -0.4062285871965436,
     :  -0.3387756347656252, -0.1154393064969860,  0.1386267977522433,
     :   0.2983398437499999,  0.2946822899738417,  0.1421667023662355,
     :  -0.0736389160156247, -0.2411438204267539, -0.2780152138015390,
     :  -0.1702199717734854,  0.0233078500507820,  0.2017461677801639,
     :   0.2734375000000000,  0.2017461677801637,  0.0233078500507823,
     :  -0.1702199717734856, -0.2780152138015389, -0.2411438204267541,
     :  -0.0736389160156256,  0.1421667023662345,  0.2946822899738417,
     :   0.2983398437500000,  0.1386267977522436, -0.1154393064969851,
     :  -0.3387756347656252, -0.4062285871965436, -0.2518394329592755,
     :   0.0961843272422340,  0.5218461074214460,  0.8675072424113839,
     :   0.9999999999999999, !l=8
     :    1.d0,               0.8358030625618563,  0.4227908262095604,
     :  -0.0427678470871820, -0.3516965439585606, -0.3895753775840083,
     :  -0.1895752020674374,  0.0965466501521480,  0.2900129518321392,
     :   0.2855357949420288,  0.1040702571419237, -0.1296148616096214,
     :  -0.2678985595703124, -0.2300282650476974, -0.0475853420789779,
     :   0.1594938673922339,  0.2596271741311750,  0.1912893739620407,
     :   0.d0,               -0.1912893739620408, -0.2596271741311750,
     :  -0.1594938673922337,  0.0475853420789776,  0.2300282650476972,
     :   0.2678985595703126,  0.1296148616096223, -0.1040702571419237,
     :  -0.2855357949420286, -0.2900129518321393, -0.0965466501521489,
     :   0.1895752020674374,  0.3895753775840083,  0.3516965439585610,
     :   0.0427678470871837, -0.4227908262095604, -0.8358030625618563,
     :  -1.0d0, !l=9
     :    1.d0,               0.8012263830183874,  0.3214371020725618,
     :  -0.1650559737869646, -0.4012691398528088, -0.3052371483731576,
     :  -0.0070381164550785,  0.2541595089459212,  0.2973452213717109,
     :   0.1151123046875002, -0.1381134245037884, -0.2692036899279551,
     :  -0.1882286071777347,  0.0323225618852737,  0.2192909159370844,
     :   0.2316300704666523,  0.0646821277096136, -0.1498948128140948,
     :  -0.2460937500000000, -0.1498948128140945,  0.0646821277096133,
     :   0.2316300704666524,  0.2192909159370846,  0.0323225618852740,
     :  -0.1882286071777338, -0.2692036899279552, -0.1381134245037884,
     :   0.1151123046874998,  0.2973452213717107,  0.2541595089459217,
     :  -0.0070381164550785, -0.3052371483731576, -0.4012691398528087,
     :  -0.1650559737869663,  0.3214371020725618,  0.8012263830183874,
     :   1.0d0, !l=10
     :    1.d0,               0.7639723948907687,  0.2199745902425398,
     :  -0.2654899922067920, -0.4001361094053681, -0.1739691925356774,
     :   0.1607048254665143,  0.3096940369434373,  0.1712039296903654,
     :  -0.1041843121206252, -0.2640938299518089, -0.1769489217685260,
     :   0.0638713836669918,  0.2351949867068314,  0.1864448673877249,
     :  -0.0305439024693600, -0.2145819214199522, -0.1988401643874466,
     :  -0.d0,                0.1988401643874467,  0.2145819214199524,
     :   0.0305439024693597, -0.1864448673877247, -0.2351949867068315,
     :  -0.0638713836669929,  0.1769489217685250,  0.2640938299518089,
     :   0.1041843121206256, -0.1712039296903651, -0.3096940369434371,
     :  -0.1607048254665143,  0.1739691925356774,  0.4001361094053674,
     :   0.2654899922067935, -0.2199745902425398, -0.7639723948907687,
     :  -1.0d0, !l=11
     :    1.d0,               0.7242508766838661,  0.1205619634785139,
     :  -0.3402156675417783, -0.3528461079948227, -0.0223994122987673,
     :   0.2732026576995847,  0.2532529151100327, -0.0211959665468148,
     :  -0.2467193603515624, -0.1987621574395934,  0.0522403961693358,
     :   0.2337529659271239,  0.1608832364718212, -0.0787948640986145,
     :  -0.2274794732968445, -0.1307103229955952,  0.1041876258336827,
     :   0.2255859375000000,  0.1041876258336824, -0.1307103229955949,
     :  -0.2274794732968445, -0.0787948640986148,  0.1608832364718208,
     :   0.2337529659271242,  0.0522403961693370, -0.1987621574395934,
     :  -0.2467193603515626, -0.0211959665468151,  0.2532529151100319,
     :   0.2732026576995847, -0.0223994122987673, -0.3528461079948216,
     :  -0.3402156675417794,  0.1205619634785139,  0.7242508766838661,
     :   1.0d0, !l=12
     :    1.d0,               0.6822848728715327,  0.0252741404530693,
     :  -0.3868998144759980, -0.2682722143099729,  0.1215470204340535,
     :   0.3066579340871881,  0.1130759719263075, -0.1892594973867281,
     :  -0.2393239671859560, -0.0019169494228223,  0.2209602744562826,
     :   0.1658042669296268, -0.0863488459198849, -0.2239287828046974,
     :  -0.0850287439881171,  0.1544263709444925,  0.2010073631165848,
     :   0.d0,               -0.2010073631165848, -0.1544263709444927,
     :   0.0850287439881174,  0.2239287828046974,  0.0863488459198852,
     :  -0.1658042669296259, -0.2209602744562829,  0.0019169494228223,
     :   0.2393239671859559,  0.1892594973867283, -0.1130759719263063,
     :  -0.3066579340871881, -0.1215470204340535,  0.2682722143099714,
     :   0.3868998144759986, -0.0252741404530693, -0.6822848728715327,
     :  -1.0d0, !l=13
     :    1.d0,               0.6383092908975658, -0.0639479249685944,
     :  -0.4048244601896359, -0.1585373528635494,  0.2332489757047917,
     :   0.2584894001483919, -0.0565267664441886, -0.2599246046048171,
     :  -0.0972709655761720,  0.1821884914718067,  0.1959135880956280,
     :  -0.0571736395359035, -0.2197701608296471, -0.0745390668026680,
     :   0.1687887555769041,  0.1730901687282077, -0.0629591137873694,
     :  -0.2094726562500000, -0.0629591137873692,  0.1730901687282074,
     :   0.1687887555769039, -0.0745390668026677, -0.2197701608296471,
     :  -0.0571736395359047,  0.1959135880956272,  0.1821884914718067,
     :  -0.0972709655761717, -0.2599246046048171, -0.0565267664441899,
     :   0.2584894001483919,  0.2332489757047917, -0.1585373528635478,
     :  -0.4048244601896360, -0.0639479249685944,  0.6383092908975658,
     :   1.0d0, !l=14
     :    1.d0,               0.5925694259006259, -0.1453435948658866,
     :  -0.3948856154964222, -0.0376336024799896,  0.2952538160607285,
     :   0.1465788099844741, -0.1950586719581738, -0.2083111471480614,
     :   0.0903925145887083,  0.2281989290227151,  0.0110218180465680,
     :  -0.2100185006856918, -0.0989735849558863,  0.1597120634827114,
     :   0.1638192671709930, -0.0860214809628777, -0.1982155523368993,
     :  -0.d0,                0.1982155523368993,  0.0860214809628781,
     :  -0.1638192671709932, -0.1597120634827116,  0.0989735849558860,
     :   0.2100185006856920, -0.0110218180465665, -0.2281989290227151,
     :  -0.0903925145887087,  0.2083111471480610,  0.1950586719581746,
     :  -0.1465788099844741, -0.2952538160607285,  0.0376336024799879,
     :   0.3948856154964217,  0.1453435948658866, -0.5925694259006259,
     :  -1.0d0, !l=15
     :    1.d0,               0.5453194229296360, -0.2173738497989617,
     :  -0.3594981090459360,  0.0801109823805069,  0.2997863235324998,
     :   0.0036143227480356, -0.2565851568720638, -0.0654984018134762,
     :   0.2150310277938842,  0.1133974622267885, -0.1714203945499598,
     :  -0.1498551354743544,  0.1249926896902088,  0.1757158143861920,
     :  -0.0760903373998273, -0.1912133879134348,  0.0255526482800431,
     :   0.1963806152343750,  0.0255526482800428, -0.1912133879134347,
     :  -0.0760903373998269,  0.1757158143861919,  0.1249926896902092,
     :  -0.1498551354743533, -0.1714203945499606,  0.1133974622267885,
     :   0.2150310277938843, -0.0654984018134757, -0.2565851568720638,
     :   0.0036143227480356,  0.2997863235324998,  0.0801109823805084,
     :  -0.3594981090459348, -0.2173738497989617,  0.5453194229296360,
     :   1.0d0, !l=16
     :    1.d0,               0.4968206868191444, -0.2787564951424742,
     :  -0.3024135833548532,  0.1815510415439187,  0.2495291391388186,
     :  -0.1318804596636187, -0.2244162170356465,  0.0986596289335409,
     :   0.2100803763466722, -0.0732821707421941, -0.2012351856783732,
     :   0.0522168397437776,  0.1956926903794597, -0.0336557371195274,
     :  -0.1924116478916765,  0.0165068491550204,  0.1908789305124085,
     :   0.d0,               -0.1908789305124084, -0.0165068491550208,
     :   0.1924116478916766,  0.0336557371195277, -0.1956926903794596,
     :  -0.0522168397437790,  0.2012351856783726,  0.0732821707421941,
     :  -0.2100803763466720, -0.0986596289335414,  0.2244162170356457,
     :   0.1318804596636187, -0.2495291391388186, -0.1815510415439198,
     :   0.3024135833548514,  0.2787564951424742, -0.4968206868191444,
     :  -1.0d0, !l=17
     :    1.d0,               0.4473402502277657, -0.3284943927820168,
     :  -0.2284639060903723,  0.2560660772638863,  0.1566049759022060,
     :  -0.2254920821287668, -0.1151187464804017,  0.2088161638052374,
     :   0.0857609212398531, -0.1986904086442199, -0.0625380508941759,
     :   0.1922962221433407,  0.0427633298772186, -0.1883362080962543,
     :  -0.0249698460161307,  0.1861639468970066,  0.0082151001649074,
     :  -0.1854705810546875,  0.0082151001649077,  0.1861639468970066,
     :  -0.0249698460161310, -0.1883362080962544,  0.0427633298772182,
     :   0.1922962221433410, -0.0625380508941743, -0.1986904086442199,
     :   0.0857609212398526,  0.2088161638052376, -0.1151187464804002,
     :  -0.2254920821287668,  0.1566049759022060,  0.2560660772638870,
     :  -0.2284639060903699, -0.3284943927820168,  0.4473402502277657,
     :   1.0d0, !l=18
     :    1.d0,               0.3971491106048946, -0.3658960319077823,
     :  -0.1432466015006718,  0.2965866932648836,  0.0399984702109972,
     :  -0.2553463668767342,  0.0289684692406089,  0.2180388300054719,
     :  -0.0809309474930734, -0.1792843706169852,  0.1207910686624480,
     :   0.1377672102244109, -0.1501991344046825, -0.0935549198236200,
     :   0.1696995162666766,  0.0473145699931434, -0.1794383685488659,
     :  -0.d0,                0.1794383685488658, -0.0473145699931430,
     :  -0.1696995162666765,  0.0935549198236197,  0.1501991344046828,
     :  -0.1377672102244098, -0.1207910686624492,  0.1792843706169852,
     :   0.0809309474930739, -0.2180388300054717, -0.0289684692406105,
     :   0.2553463668767342, -0.0399984702109972, -0.2965866932648837,
     :   0.1432466015006691,  0.3658960319077823, -0.3971491106048946,
     :  -1.0d0, !l=19
     :    1.d0,               0.3465205470396967, -0.3905879624444973,
     :  -0.0527721934535392,  0.3002028644137024, -0.0780854233146243,
     :  -0.2169985809123321,  0.1556354917131983,  0.1273281408992422,
     :  -0.1930651776492595, -0.0359655672719339,  0.1945128242270279,
     :  -0.0483583810673730, -0.1644051127226336,  0.1165239468719944,
     :   0.1093682138866010, -0.1608343762821689, -0.0383005595188557,
     :   0.1761970520019531, -0.0383005595188560, -0.1608343762821691,
     :   0.1093682138866013,  0.1165239468719947, -0.1644051127226334,
     :  -0.0483583810673745,  0.1945128242270278, -0.0359655672719339,
     :  -0.1930651776492597,  0.1273281408992416,  0.1556354917131995,
     :  -0.2169985809123321, -0.0780854233146243,  0.3002028644137019,
     :  -0.0527721934535362, -0.3905879624444973,  0.3465205470396967,
     :   1.0d0, !l=20
     :    1.d0,               0.2957284280607044, -0.4025188362588677,
     :   0.0369046201323278,  0.2683000575364107, -0.1762626628375204,
     :  -0.1237166805871750,  0.2213183330676269, -0.0172227139895006,
     :  -0.1894574571207802,  0.1256114452672421,  0.1027840714802095,
     :  -0.1784138579223508,  0.0073941888918381,  0.1669092101849390,
     :  -0.1063533657782334, -0.0995887547673478,  0.1643764147030539,
     :   0.d0,               -0.1643764147030537,  0.0995887547673474,
     :   0.1063533657782331, -0.1669092101849389, -0.0073941888918386,
     :   0.1784138579223510, -0.1027840714802081, -0.1256114452672421,
     :   0.1894574571207799,  0.0172227139895013, -0.2213183330676272,
     :   0.1237166805871750,  0.1762626628375204, -0.2683000575364096,
     :  -0.0369046201323309,  0.4025188362588677, -0.2957284280607044,
     :  -1.0d0, !l=21
     :    1.d0,               0.2450455214934912, -0.4019550285434764,
     :   0.1200473848826386,  0.2062219076781111, -0.2376990789914401,
     :  -0.0022784861835140,  0.2057849712624961, -0.1473275284458508,
     :  -0.0775544242933395,  0.1921436627623865, -0.0704420403244084,
     :  -0.1281987246779867,  0.1630399497819409,  0.0003503877841218,
     :  -0.1581982901957984,  0.1197229751510177,  0.0645611243628438,
     :  -0.1681880950927734,  0.0645611243628441,  0.1197229751510180,
     :  -0.1581982901957985,  0.0003503877841213,  0.1630399497819411,
     :  -0.1281987246779855, -0.0704420403244100,  0.1921436627623865,
     :  -0.0775544242933390, -0.1473275284458513,  0.2057849712624953,
     :  -0.0022784861835140, -0.2376990789914401,  0.2062219076781093,
     :   0.1200473848826415, -0.4019550285434764,  0.2450455214934912,
     :   1.0d0, !l=22
     :    1.d0,               0.1947418174476926, -0.3894680384147201,
     :   0.1915720644233040,  0.1225101284446560, -0.2528915260581189,
     :   0.1144770331151555,  0.1181134681619712, -0.2043380366969069,
     :   0.0739259733417133,  0.1214951591641724, -0.1773662966608825,
     :   0.0452449377842180,  0.1277388066122012, -0.1594178190635712,
     :   0.0216200512557120,  0.1359342628510581, -0.1462205152120063,
     :  -0.d0,                0.1462205152120060, -0.1359342628510578,
     :  -0.0216200512557116,  0.1594178190635714, -0.1277388066122009,
     :  -0.0452449377842196,  0.1773662966608829, -0.1214951591641724,
     :  -0.0739259733417138,  0.2043380366969069, -0.1181134681619695,
     :  -0.1144770331151555,  0.2528915260581189, -0.1225101284446538,
     :  -0.1915720644233065,  0.3894680384147201, -0.1947418174476926,
     :  -1.0d0, !l=23
     :   0.9999999999999999,  0.1450828753934323, -0.3659140875508277,
     :   0.2473332152055204,  0.0278176548308069, -0.2210502696780611,
     :   0.1963327527965786, -0.0077361900249651, -0.1653529862346782,
     :   0.1766920391819439, -0.0312004935415233, -0.1317204210755244,
     :   0.1671594460634508, -0.0505264784101036, -0.1071121612208268,
     :   0.1625649034372373, -0.0685085745093321, -0.0868279944972103,
     :   0.1611802577972412, -0.0868279944972106, -0.0685085745093326,
     :   0.1625649034372373, -0.1071121612208265, -0.0505264784101041,
     :   0.1671594460634511, -0.1317204210755231, -0.0312004935415233,
     :   0.1766920391819441, -0.1653529862346776, -0.0077361900249670,
     :   0.1963327527965786, -0.2210502696780611,  0.0278176548308045,
     :   0.2473332152055224, -0.3659140875508277,  0.1450828753934323,
     :   0.9999999999999999, !l=24
     :    1.d0,               0.0963282061018667, -0.3324065426204970,
     :   0.2843456770752317, -0.0663752351615954, -0.1498897132263312,
     :   0.2233591851823147, -0.1258096765484506, -0.0521042478370494,
     :   0.1739137382029294, -0.1559437225002138,  0.0221902545527365,
     :   0.1203811168693325, -0.1644819428037249,  0.0812374535049964,
     :   0.0617115412211426, -0.1538138150085009,  0.1255392802342060,
     :   0.d0,               -0.1255392802342056,  0.1538138150085007,
     :  -0.0617115412211431, -0.0812374535049969,  0.1644819428037249,
     :  -0.1203811168693312, -0.0221902545527383,  0.1559437225002138,
     :  -0.1739137382029292,  0.0521042478370486,  0.1258096765484520,
     :  -0.2233591851823147,  0.1498897132263312,  0.0663752351615977,
     :  -0.2843456770752331,  0.3324065426204970, -0.0963282061018667,
     :  -1.0d0, !l=25
     :    1.d0,               0.0487296989664610, -0.2902819756840914,
     :   0.3009295425759037, -0.1490934470641724, -0.0539192379626115,
     :   0.1906481667479185, -0.1947121226889184,  0.0807000773240462,
     :   0.0713251455890716, -0.1666215763719278,  0.1516203342469327,
     :  -0.0426641412083958, -0.0877694134721161,  0.1574935057912086,
     :  -0.1249824752010470,  0.0134819400094558,  0.1049505689340003,
     :  -0.1549810171127319,  0.1049505689340005,  0.0134819400094564,
     :  -0.1249824752010467,  0.1574935057912086, -0.0877694134721157,
     :  -0.0426641412083974,  0.1516203342469335, -0.1666215763719278,
     :   0.0713251455890710,  0.0807000773240470, -0.1947121226889189,
     :   0.1906481667479185, -0.0539192379626115, -0.1490934470641743,
     :   0.3009295425759043, -0.2902819756840914,  0.0487296989664610,
     :   1.0d0, !l=26
     :    1.d0,               0.0025301048926376, -0.2410608415991475,
     :   0.2967711148376775, -0.2110981675009851,  0.0484132965312952,
     :   0.1090106456095244, -0.1919402436003533,  0.1715245285485641,
     :  -0.0684714446360444, -0.0600697892335228,  0.1493423512741293,
     :  -0.1577966215046346,  0.0855779183055838,  0.0275082086784951,
     :  -0.1229235500263773,  0.1527125277357792, -0.1029343671246687,
     :  -0.d0,                0.1029343671246683, -0.1527125277357792,
     :   0.1229235500263776, -0.0275082086784946, -0.0855779183055844,
     :   0.1577966215046349, -0.1493423512741283,  0.0600697892335228,
     :   0.0684714446360450, -0.1715245285485643,  0.1919402436003526,
     :  -0.1090106456095244, -0.0484132965312952,  0.2110981675009862,
     :  -0.2967711148376775,  0.2410608415991475, -0.0025301048926376,
     :  -1.0d0, !l=27
     :    1.d0,              -0.0420384154540379, -0.1864038883223709,
     :   0.2728978924270622, -0.2458815497743938,  0.1381811980472861,
     :   0.0016010306696318, -0.1210830731557074,  0.1802801989170858,
     :  -0.1638818994997563,  0.0848255774669136,  0.0220539259120850,
     :  -0.1138384028125273,  0.1556767026078669, -0.1333880276873504,
     :   0.0580251521183618,  0.0390889817106167, -0.1188245724419140,
     :   0.1494459807872772, -0.1188245724419142,  0.0390889817106161,
     :   0.0580251521183614, -0.1333880276873507,  0.1556767026078669,
     :  -0.1138384028125260,  0.0220539259120830,  0.0848255774669136,
     :  -0.1638818994997565,  0.1802801989170854, -0.1210830731557057,
     :   0.0016010306696318,  0.1381811980472861, -0.2458815497743941,
     :   0.2728978924270614, -0.1864038883223709, -0.0420384154540379,
     :   1.0d0, !l=28
     :    1.d0,              -0.0847556687140972, -0.1280655212647914,
     :   0.2315709914465134, -0.2503198879608715,  0.1994070813250118,
     :  -0.1025264028563707, -0.0096290914736108,  0.1058332393784417,
     :  -0.1616577134428043,  0.1651679109935239, -0.1193295840841382,
     :   0.0404796869645772,  0.0466879959335967, -0.1162292829933982,
     :   0.1482029732807286, -0.1341051772920778,  0.0790295303111514,
     :   0.d0,               -0.0790295303111510,  0.1341051772920780,
     :  -0.1482029732807287,  0.1162292829933979, -0.0466879959335961,
     :  -0.0404796869645789,  0.1193295840841394, -0.1651679109935239,
     :   0.1616577134428041, -0.1058332393784408,  0.0096290914736086,
     :   0.1025264028563707, -0.1994070813250118,  0.2503198879608707,
     :  -0.2315709914465118,  0.1280655212647914,  0.0847556687140972,
     :  -1.0d0, !l=29
     :    1.d0,              -0.1254147224132981, -0.0678454138174369,
     :   0.1761034931270257, -0.2249212132718990,  0.2218490833913373,
     :  -0.1761689195307446,  0.1015345137855178, -0.0148273612710158,
     :  -0.0663890524497222,  0.1267987856340612, -0.1559265823091394,
     :   0.1498488149006106, -0.1116827864725649,  0.0507613399092899,
     :   0.0193459319364663, -0.0835840176367870,  0.1284099122732752,
     :  -0.1444644480943680,  0.1284099122732753, -0.0835840176367865,
     :   0.0193459319364668,  0.0507613399092904, -0.1116827864725653,
     :   0.1498488149006110, -0.1559265823091388,  0.1267987856340612,
     :  -0.0663890524497216, -0.0148273612710167,  0.1015345137855195,
     :  -0.1761689195307446,  0.2218490833913373, -0.2249212132718972,
     :   0.1761034931270235, -0.0678454138174369, -0.1254147224132981,
     :   1.0d0, !l=30
     :    1.d0,              -0.1638231068372385, -0.0075396910843226,
     :   0.1106176740445976, -0.1736505944429901,  0.2026665877917705,
     :  -0.2009929114268595,  0.1729799103464310, -0.1247696987589606,
     :   0.0640689775185646,  0.0005402792985679, -0.0605063579253414,
     :   0.1082580079203649, -0.1380577473618347,  0.1466427076007685,
     :  -0.1335695601602119,  0.1012189795398422, -0.0544578893946409,
     :  -0.0000000000000003,  0.0544578893946404, -0.1012189795398426,
     :   0.1335695601602117, -0.1466427076007685,  0.1380577473618345,
     :  -0.1082580079203634,  0.0605063579253394, -0.0005402792985679,
     :  -0.0640689775185653,  0.1247696987589612, -0.1729799103464317,
     :   0.2009929114268595, -0.2026665877917705,  0.1736505944429876,
     :  -0.1106176740445950,  0.0075396910843226,  0.1638231068372385,
     :  -1.0d0, !l=31
     :    1.d0,              -0.1998039176227111,  0.0511069879851748,
     :   0.0397576628092337, -0.1033646208356401,  0.1467003667563042,
     :  -0.1720267635297199,  0.1806041076582779, -0.1738074146264419,
     :   0.1535058737302036, -0.1221526065564330,  0.0827283662122886,
     :  -0.0385995628883574, -0.0066754471116840,  0.0495671354594559,
     :  -0.0868017402813291,  0.1155757344159872, -0.1337414156808467,
     :   0.1399499340914190, -0.1337414156808467,  0.1155757344159869,
     :  -0.0868017402813294,  0.0495671354594554, -0.0066754471116834,
     :  -0.0385995628883592,  0.0827283662122903, -0.1221526065564330,
     :   0.1535058737302040, -0.1738074146264419,  0.1806041076582774,
     :  -0.1720267635297199,  0.1467003667563042, -0.1033646208356371,
     :   0.0397576628092308,  0.0511069879851748, -0.1998039176227111,
     :   1.0d0, !l=32
     :    1.d0,              -0.2331968121757325,  0.1064471631744530,
     :  -0.0316234425728967, -0.0229301249105242,  0.0653572333202261,
     :  -0.0985423458161100,  0.1236632554123211, -0.1412649366454028,
     :   0.1516733514161961, -0.1551809323213489,  0.1521370045341878,
     :  -0.1429921832522209,  0.1283173374249815, -0.1088067976639092,
     :   0.0852708968330755, -0.0586208735492268,  0.0298482076770401,
     :   0.d0,               -0.0298482076770396,  0.0586208735492273,
     :  -0.0852708968330751,  0.1088067976639096, -0.1283173374249818,
     :   0.1429921832522213, -0.1521370045341877,  0.1551809323213489,
     :  -0.1516733514161958,  0.1412649366454021, -0.1236632554123194,
     :   0.0985423458161100, -0.0653572333202261,  0.0229301249105211,
     :   0.0316234425728998, -0.1064471631744530,  0.2331968121757325,
     :  -1.0d0, !l=33
     :    0.9999999999999999, -0.2638588937600512, 0.1569729068345042,
     :  -0.0987817107595834,  0.0578636897954167, -0.0256602807835139,
     :  -0.0012031916709360,  0.0243264122077631, -0.0445522070260791,
     :   0.0623531256701767, -0.0780031023786529,  0.0916626875044093,
     :  -0.1034250754009885,  0.1133426326754760, -0.1214429787586412, 
     :   0.1277391023394057, -0.1322358694907957,  0.1349342170300918,
     :  -0.1358337595593184,  0.1349342170300917, -0.1322358694907955,
     :   0.1277391023394059, -0.1214429787586410,  0.1133426326754757,
     :  -0.1034250754009870,  0.0916626875044075, -0.0780031023786529,
     :   0.0623531256701760, -0.0445522070260781,  0.0243264122077608,
     :  -0.0012031916709360, -0.0256602807835139,  0.0578636897954196,
     :  -0.0987817107595864,  0.1569729068345042, -0.2638588937600512,
     :   0.9999999999999999, !l=34
     :    1.d0,              -0.2916654778738603,  0.2013536517956832,
     :  -0.1573855296592199,  0.1294695978999852, -0.1093376480288922,
     :   0.0936726323889920, -0.0808453026855633,  0.0699459678026775,
     :  -0.0604189144820314,  0.0519008910235531, -0.0441412764756520,
     :   0.0369591179783259, -0.0302183854480599,  0.0238128833002565,
     :  -0.0176565694437896,  0.0116770278652423, -0.0058108262689571,
     :  -0.d0,                0.0058108262689566, -0.0116770278652429,
     :   0.0176565694437890, -0.0238128833002570,  0.0302183854480605,
     :  -0.0369591179783278,  0.0441412764756540, -0.0519008910235531,
     :   0.0604189144820321, -0.0699459678026784,  0.0808453026855653,
     :  -0.0936726323889920,  0.1093376480288922, -0.1294695978999875,
     :   0.1573855296592226, -0.2013536517956832,  0.2916654778738603,
     :  -1.0d0, !l=35
     :    1.d0,              -0.3165107363409996,  0.2384685420882698,
     :  -0.2037848671093981,  0.1836873968420719, -0.1704870295039414,
     :   0.1611621149429710, -0.1542602963850182,  0.1489897045176110,
     :  -0.1448796031264049,  0.1416321475180187, -0.1390500050748213,
     :   0.1369979535351436, -0.1353811636755332,  0.1341322984851771,
     :  -0.1332035663707885,  0.1325617152622996, -0.1321848701248350,
     :   0.1320605995715596, -0.1321848701248348,  0.1325617152622996,
     :  -0.1332035663707884,  0.1341322984851772, -0.1353811636755334,
     :   0.1369979535351440, -0.1390500050748218,  0.1416321475180187,
     :  -0.1448796031264052,  0.1489897045176113, -0.1542602963850192,
     :   0.1611621149429710, -0.1704870295039414,  0.1836873968420733,
     :  -0.2037848671094003,  0.2384685420882698, -0.3165107363409996,
     :   1.0d0/ !l=36

      data ifirst /0/
      if (ifirst .eq. 0) then
         ideriv=-1
         call potential(IDERIV,R,ang,P)
         ideriv=0
         ifirst=1
      endif
      icount=0
      do i=1,37
      do j=1,37
       icount=icount+1
       dd0(i,j)=d0(icount)
      enddo
      enddo
      do i=1,37
      thta(i)=0.D0+(i-1)*5.D0
      enddo
      ideriv=0
* detemine potential at angles
      do 100 i=1,37
       call potential(IDERIV,r,thta(i),V)
        vsum(i)=V
100   continue
* solve simultaneous equations for solutions
* first for vsigma
      tol=1.e-10
*      call dcopy(169,d0,1,aa,1)
*      call dqrank(aa,13,13,13,tol,kr,kpvt,qraux,work)
*      call dqrlss(aa,13,13,13,kr,vsum,xsum,rsd,kpvt,qraux)
      call dgels('T',37,37,1,dd0,37,vsum,37,work,lwork,info)
* convert to hartree
      conv=1.d0/219474.6
c     conv=1.d0/1.d6
      call dscal(37,conv,vsum,1)
      vv0=vsum(1)
      call dcopy(36,vsum(2),1,vvl,1)
      return
      end
c==========================================================
      subroutine potential(IDERIV,R_,angl,V_)
      implicit none
      integer*4 IDERIV
      real*8 R_,angl,V_
      
c DEBUT DECLARATION FONCTION dlmm0
      real*8 dlmm0
C FIN DECLARATION FONCTION dlmm0
c max_b: maximum number of blocks
c max_p
c max_r
c max_rr
c max_par : maximum number of parameters which can be fitted
cmax_theta
      integer*4 max_b,max_p,max_r,max_rr,max_par,max_theta
      parameter (max_b=90,max_p=10,max_r=10,max_rr=70)
      parameter (max_par=50,max_theta=40)

c DEBUT TYPE POT
      integer*4 npa(max_p)
      real*8 a(max_p,max_par,max_b)
      integer*4 ntotal(max_p)
      integer*4 nblk(max_p)
      integer*4 nangle(max_p)
      integer*4 nr(max_p)
      integer*4 isym(max_p)
      integer*4 npblk(max_p,max_b)
      real*8 angle(max_p,max_b)
      real*8 r(max_p,max_b)
      real*8 rr(max_p,max_rr,max_b)
      real*8 v(max_p,max_rr,max_b)
      real*8 pinv(max_p,max_theta,max_theta) 
      integer*4 maxpws(max_p)
      integer*4 minmps(max_p)
      integer*4 maxmps(max_p)
      integer*4 mpsstp(max_p)
      real*8 updmax(max_p)
      real*8 wfac(max_p)
      real*8 ang(max_p,max_theta)
      real*8 rmol(max_p,max_r)
      integer*4 mld(max_p)
      real*8 re(max_p)
      logical fitflg(max_p,max_b)
      real*8 rinv(max_p,max_r,max_r)
      integer*4 maxit(max_p)
      real*8 eps(max_p)
      real*8 xr(max_p,max_b)
      save npa,a,ntotal,nblk,nangle,nr,isym,npblk,angle,r,rr,v,pinv,
     &     maxpws,minmps,maxmps,mpsstp,updmax,wfac,ang,rmol,mld,re,
     &     fitflg,rinv,maxit,eps,xr
c FIN TYPE POT
c DEBUT DECLARATION DES VARIABLES
      real*8 bidon1(max_par,max_b),bidon2(max_b)
      real*8 bidon3(max_rr,max_b),bidon4(max_theta,max_theta)
      real*8 bidon5(max_r)
      logical bidon6(max_b)
      real*8 bidon7(max_r,max_r),bidon8(max_theta)
      integer*4 bidon9(max_b)
      character*80 filnam,label
      integer*4 s1,s2,i,j,l,n,lmax,iblk,ipot
      integer*4 input,nterms,ierr,ntblk,ntot,ntpa
      logical readfl,exstfl,openfl
      real*8 vcalc,vvlsum,vvl(max_theta),vvlp(max_theta)
      real*8 pvec(max_theta)
      real*8 rvecp(max_theta),rvecpp(max_theta),b(max_theta,max_r),dr
      real*8 theta,det,rd
      real*8 fct,tanhyb,fex,pfac,rpowi,pexfac,fmfac,jst,powmj

c FIN DECLARATION DES VARIABLES
      if (ideriv.eq.-1) then
c DEBUT INITIALISATION
c
c...subroutine to load fitted surface on unformatted files (filnam.srf).
c
c   on entry:   filnam  filename
c NOM DU FICHIER ICI ET NUMERO DU CANAL D'AFFICHAGE DES RESULTATS
        filnam="potdata/h2c2h_fitmlv37.dat"
        input=6
        ntblk=0
        ntot=0
        ntpa=0
        ierr=0
        open(unit=1,file=filnam,status='OLD',form='FORMATTED')
        read(1,"(a80)",iostat=ierr) label
        write(input,*) 'label : ',label
        read(1,"(i10)",iostat=ierr) nterms
        write(input,*) 'nterms : ',nterms
        do ipot=1,nterms
          read(1,"(i10)",iostat=ierr) npa(ipot)
          read(1,"(e30.20)",iostat=ierr) bidon1
          do s1=1,max_par
            do s2=1,max_b
              a(ipot,s1,s2)=bidon1(s1,s2)
            enddo
          enddo
          read(1,"(i10)",iostat=ierr) ntotal(ipot)
          read(1,"(i10)",iostat=ierr) nblk(ipot)
          read(1,"(i10)",iostat=ierr) nangle(ipot)
          read(1,"(i10)",iostat=ierr) nr(ipot)
          read(1,"(i10)",iostat=ierr) isym(ipot)
          read(1,"(i10)",iostat=ierr) bidon9
          do s1=1,max_b
            npblk(ipot,s1)=bidon9(s1)
          enddo
          read(1,"(e30.20)",iostat=ierr) bidon2
          do s1=1,max_b
            angle(ipot,s1)=bidon2(s1)
          enddo
          read(1,"(e30.20)",iostat=ierr) bidon2
          do s1=1,max_b
            r(ipot,s1)=bidon2(s1)
          enddo
          read(1,"(e30.20)",iostat=ierr) bidon3
          do s1=1,max_rr
            do s2=1,max_b
              rr(ipot,s1,s2)=bidon3(s1,s2)
            enddo
          enddo
          read(1,"(e30.20)",iostat=ierr) bidon3
          do s1=1,max_rr
            do s2=1,max_b
              v(ipot,s1,s2)=bidon3(s1,s2)
            enddo
          enddo
          read(1,"(i10)",iostat=ierr) maxpws(ipot)
          read(1,"(i10)",iostat=ierr) minmps(ipot)
          read(1,"(i10)",iostat=ierr) maxmps(ipot)
          read(1,"(i10)",iostat=ierr) mpsstp(ipot)
          read(1,"(e30.20)",iostat=ierr) updmax(ipot)
          read(1,"(e30.20)",iostat=ierr) wfac(ipot)
          read(1,"(e30.20)",iostat=ierr) bidon8
          do s1=1,max_theta
            ang(ipot,s1)=bidon8(s1)
          enddo
          read(1,"(e30.20)",iostat=ierr) bidon5
          do s1=1,max_r
            rmol(ipot,s1)=bidon5(s1)
          enddo
          read(1,"(e30.20)",iostat=ierr) re(ipot)
          read(1,"(i10)",iostat=ierr) mld(ipot)
          read(1,"(l1)",iostat=ierr) bidon6
          do s1=1,max_b
            fitflg(ipot,s1)=bidon6(s1)
          enddo
          read(1,"(e30.20)",iostat=ierr) bidon4
          do s1=1,max_theta
            do s2=1,max_theta
              pinv(ipot,s1,s2)=bidon4(s1,s2)
            enddo
          enddo
          read(1,"(e30.20)",iostat=ierr) bidon2
          do s1=1,max_b
            xr(ipot,s1)=bidon2(s1)
          enddo
        enddo
        do ipot=1,nterms
          ntblk=ntblk+nblk(ipot)
          write(input,*) 'ntblk',ntblk
          ntot=ntot+ntotal(ipot)
          ntpa=ntpa+npa(ipot)
        enddo
c       initialize matrices
        do ipot=1,nterms
c DEBUT INIMAT
c...subroutine to initialize transformation matrices
c                   -1
c...job 1: compute p   maxtrix
          lmax=(nangle(ipot)-1)*isym(ipot)+mld(ipot)
c
c..built up p matrix for calculated angles
          do i=1,nangle(ipot)
            j=0
            theta=ang(ipot,i)
            do l=mld(ipot),lmax,isym(ipot)
              j=j+1
              pinv(ipot,i,j)=dlmm0(l,mld(ipot),theta)
            enddo
          enddo
c...now invert matrix
          do s1=1,max_theta
            do s2=1,max_theta
              bidon4(s1,s2)=pinv(ipot,s1,s2)
            enddo
          enddo
          call matinv(bidon4,det,max_theta,nangle(ipot))
          do s1=1,max_theta
            do s2=1,max_theta
              pinv(ipot,s1,s2)=bidon4(s1,s2)
            enddo
          enddo
c                   -1
c...job 2: compute r
c..built up r matrix
          do i=1,nr(ipot)
            j=1
            rd=rmol(ipot,i)-re(ipot)
            rinv(ipot,1,i)=1d0
            do n=1,nr(ipot)
              j=j+1
              rinv(ipot,j,i)=rd
              rd=rd*(rmol(ipot,i)-re(ipot))
            enddo
          enddo
c...matrix inversion
          do s1=1,max_r
            do s2=1,max_r
              bidon7(s1,s2)=rinv(ipot,s1,s2)
            enddo
          enddo
          call matinv(bidon7,det,max_r,nr(ipot))
          do s1=1,max_r
            do s2=1,max_r
              rinv(ipot,s1,s2)=bidon7(s1,s2)
            enddo
          enddo
c FIN INIMAT
        enddo
        ipot=1
        write(input,'(a,a,/)') ' SURFACE LOADED FROM FILE ',filnam
        write(input,*) 
     &'  LABEL:',label(:72),
     &'  NUMBER OF POTENTIALS (NTERMS): ',nterms,
     &'  TOTAL NUMBER OF BLOCKS:        ',ntblk,
     &'  TOTAL NUMBER OF POINTS:       ',ntot,
     &'  TOTAL NUMBER OF COEFFICIENTS:  ',ntpa
        write(input,*) 'nangle',nangle(ipot)
        readfl=.true.
        close(1)
      endif
      if (ideriv.eq.0) then
c      write(input,*) 'nangle',nangle(ipot)
c potentiel
c vcalc veut un angle en degree
c cosang is the angle
c conversion
      rd=0.0d0
      ipot=1
c...function to calculate potential for any given geometry
      lmax=(nangle(ipot)-1)*isym(ipot)+mld(ipot)
      vcalc=0.
c                            mld,0                  mld,0
c...calculate pvec: pvec(1)=d     (angle), pvec(2)=d       (angle), ...
c                            l                      l+isym
c
c   where isym = 2 if homonuclear molecule and isym =1 if heteronuclear
c   molecule
      i=0
      do l=mld(ipot),lmax,isym(ipot)
        i=i+1
        pvec(i)=dlmm0(l,mld(ipot),angl)
      enddo
c   now obtain vector of vvl(nangle) coefficients and calculate energy.
c   note that vvl(1) = vv0 is the isotropic term if mld (mproj) is 0.
c
c                      -1       -1
c   v(r,angle,r)=pvec*p  *b(r)*r  *rvec = pvec * vvl * rvec
c
c   first built up b(r) matrix
      iblk=0
      do l=1,nr(ipot)
        do n=1,nangle(ipot)
          iblk=iblk+1
c...this function is defined as follows:
c                                          2                    maxpws
c     b(r)=exp(-a *(r-r1))*{ a  + a *r + a *r + ... + a         *r       }
c                1          2    3      4            maxpws+2
c
c                                       minmps                minmps+mpsstp
c       -(1/2)*(1+tanh((r-r0)/rref)){a         /r       + a          /r
c                            maxpws+3             maxpws+4
c
c                        maxmps
c       + . . . + a    /r       }
c                  npa
c r0 is set to 0
c         a(npa+2,iblk,ipot)=0.0
          tanhyb=(tanh((r_-a(ipot,npa(ipot)+2,iblk))/
     &a(ipot,npa(ipot)+1,iblk))+1.d0)*0.5d0
          fex=exp(-a(ipot,1,iblk)*(r_-a(ipot,npa(ipot)+3,iblk)))
          if(fex.gt.1.d10) fex=1.d10
          pfac=0.
          rpowi=1.
          do i=2,maxpws(ipot)
            pfac=pfac+a(ipot,i,iblk)*rpowi
            rpowi=rpowi*r_
          enddo
          pexfac=fex*pfac
          if(pexfac.gt.1.d20) pexfac=1.d20
          fmfac=0.
          jst=maxpws(ipot)+1
          if (.not. (jst.gt.npa(ipot))) then
            powmj=r_**minmps(ipot)
            do j=jst,npa(ipot)
              fmfac=fmfac+a(ipot,j,iblk)/powmj
              powmj=powmj*r_**mpsstp(ipot)
            enddo
          endif
          fct=pexfac-tanhyb*fmfac
          b(n,l)=fct
        enddo
      enddo
c...fast loop if nr = 1 .and. novib
      if (nr(ipot).gt.1) then
c...here if normal treatment of r - dependent potential
c                                             2
c...calculate rvec: rvec = { 1., (r-re), (r-re) , ... }
c                       -1     -1
c    and multiply with r  :   r  * rvec = rvec'
        do i=1,nr(ipot)
          rvecp(i)=0.
          dr=1.
          do j=1,nr(ipot)
            rvecp(i)=rvecp(i)+rinv(ipot,i,j)*dr
            dr=dr*rd
          enddo
        enddo
c  calculate  b(r) * rvec' = rvec''
        do i=1,nangle(ipot)
          rvecpp(i)=0.
          do j=1,nr(ipot)
            rvecpp(i)=rvecpp(i)+b(i,j)*rvecp(j)
          enddo
        enddo
c              -1
c  calculate  p  * rvec'' = vvl  ( note that vvl(1) = vv0 if mld (mproj) is 0 )
        do i=1,nangle(ipot)
          vvl(i)=0.
          do j=1,nangle(ipot)
            vvl(i)=vvl(i)+pinv(ipot,i,j)*rvecpp(j)
          enddo
        enddo
      else
c                                                  -1
c...here if number of bond distances is 1:  vvl = p   * b(r) where
c   b(r) is a now column vector rather than a matrix
        do i=1,nangle(ipot)
          vvl(i)=0.
          do j=1,nangle(ipot)
            vvl(i)=vvl(i)+pinv(ipot,i,j)*b(j,1)
          enddo
        enddo
      endif
c  sum over all terms: v(r,angle,r) = pvec(1)*vvl(1) + pvec(2)*vvl(2) +...
      vvlsum=0.
      do i=1,nangle(ipot)
        vvlsum=vvlsum+vvl(i)
        vvlp(i)=pvec(i)*vvl(i)
        vcalc=vcalc+vvlp(i)
      enddo
      v_=vcalc
      endif
      end
c***************************************************************
c* set of subroutines/functions to be used with vfitdriver.f90 *
c***************************************************************
      subroutine matinv(a,det,n,nc)
      implicit none
      integer*4 n,nc

      integer*4 i,j,k,l
      real*8 det
      real*8 amax,saave
      real*8 a(n,n)
      integer*4 ik(100),jk(100)


10    det=1.
11    do 100 k=1,nc
      amax=0.
21    do 30 i=k,nc
      do 30 j=k,nc
23       if (dabs(amax)-dabs(a(i,j))) 24,24,30
24       amax=a(i,j)
      ik(k)=i
      jk(k)=j
30    continue
31    if (amax) 41,32,41
32    det=0.
      goto 140
41    i=ik(k)
      if (i-k) 21,51,43
43    do 50 j=1,nc
      saave=a(k,j)
      a(k,j)=a(i,j)
50       a(i,j)=-saave
51    j=jk(k)
      if (j-k) 21,61,53
53    do 60 i=1,nc
        saave=a(i,k)
        a(i,k)=a(i,j)
60      a(i,j)=-saave
61    do 70 i=1,nc
        if (i-k) 63,70,63
63      a(i,k)=-a(i,k)/amax
70    continue
71    do 80 i=1,nc
        do 80 j=1,nc
          if (i-k) 74,80,74
74        if (j-k) 75,80,75
75        a(i,j)=a(i,j)+a(i,k)*a(k,j)
80    continue
81    do 90 j=1,nc
        if (j-k) 83,90,83
83      a(k,j)=a(k,j)/amax
90    continue
      a(k,k)=1./amax
100   det=det*amax
101   do 130 l=1,nc
        k=nc-l+1
        j=ik(k)
        if (j-k) 111,111,105
105   do 110 i=1,nc
        saave=a(i,k)
        a(i,k)=-a(i,j)
110     a(i,j)=saave
111     i=jk(k)
      if (i-k) 130,130,113
113      do 120 j=1,nc
       saave=a(k,j)
       a(k,j)=-a(i,j)
120      a(i,j)=saave
130   continue
140   return
      end 

      function dlmm0(l,m,theta)
      implicit none
      integer*4  l,m
      real*8 theta
      real*8 dlmm0
      integer*4 i,l_
      real*8 x,y,thedeg,pm1,pm2,pp,rat,ai,al,al2
      real*8 pi
      pi=acos(-1d0)
c
c...function to calculate dlmm0(cos(theta)) as defined in "brink and satchler"
c
      thedeg=(theta*pi)/180.

c  if m>l pm1=0 !

      if (m.gt.l) then
        pm1=0.
        dlmm0=0
        return
      endif
      x=cos(thedeg)
      if (m.lt.0) then 
        write (6,*) '	NEGATIVE M IN LEGENDRE ROUTINE:	 ABORT'
        stop
      endif
      if (m.eq.0) then 
c  here for regular legendre polynomials
        pm1=1.
        pm2=0.
        do l_=1,l
        pp=((2.*l_-1.)*x*pm1-(l_-1.)*pm2)/float(l_)
        pm2=pm1
        pm1=pp
        enddo
      else
c  here for alexander-legendre polynomials
        rat=1.
        do i=2,2*m,2
          ai=i
          rat=rat*((ai-1.)/ai)
        enddo
        y=sin(thedeg)
        pm1=sqrt(rat)*(y**m)
        pm2=0.
        do l_=m+1,l
          al=(l_+m)*(l_-m)
          al=1./al
          al2=((l_+m-1)*(l_-m-1))*al
          al=sqrt(al)
          al2=sqrt(al2)
          pp=(2.*l_-1.)*x*pm1*al-pm2*al2
          pm2=pm1
          pm1=pp
        enddo
c correct phase
        pm1=((-1.)**m)*pm1
      endif
      dlmm0=pm1
      return
      end

c ------------------------------------------------------------------------

