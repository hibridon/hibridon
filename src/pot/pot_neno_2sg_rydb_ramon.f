*Ne-NO(^2Sigma Rydberg) PES RCCSD(T) Ramon Hernandez CPL 2006
*reference:
* P. Pajón-Suárez, G. Rojas-Lorenzo, J. Rubayo-Soneira,
* R. Hernández-Lamoneda, Chem. Phys. Lett., 421,389-394 (2006)

      subroutine driver
      implicit double precision (a-h,o-z)
      common /cosysr/ xjunk(2),rshift,xfact
      common /covvl/ vvl(10)
      include "common/parpot"
      potnam='Ramon H PES Ne-NO(Sigma Rydberg) CCSD(T) CPL2006'
      print *, potnam
1      print *, ' r (bohr)'
      rshift=0.5
      xfact=0.8
      read (5, *, end=99) r
      call pot(vv0,r)
      write (6, 100) vv0,vvl
100   format(' vsum',/,7(1pe16.8))
      goto 1
99    end

      include "common/syusr"
      include "common/bausr"
      include "common/ground"
      subroutine loapot(iunit,filnam)
* ------------------------------------------------------------------------
      character*(*) filnam
      include "common/parbas"
      include "common/parpot"
      potnam='Ramon H PES Ne-NO(Sigma Rydberg) CCSD(T) CPL2006'
      lammin(1)=1
      lammax(1)=10
      mproj(1)=0
      ntv(1)=1
      ivcol(1,1)=0
      ivrow(1,1)=0
      return
      end
* ----------------------------------------------------------------------
      subroutine pot (vv0, r)
*  subroutine to calculate the r-dependent coefficients
*  in atomic units (distance and energy)
* ----------------------------------------------------------------------
*  on entry:
*    r:      interparticle distance
*  on return:
*  vv0        contains isotropic term (d00 term in vsum)
*  variable in common block /covvl/
*    vvl:     vector of length 6 to store r-dependence of each term
*             in potential expansion
*    vvl(1-10) expansion coefficients in dl0 (l=1:11) of vsum

* uses linear least squares routines from cmlib

* author:  millard alexander
* latest revision date:  8-oct-1993
* revised for He-NO(X) : 1-20-95 by Moonbong Yang
* revised for CCSD(T) PES: 2002.10.13 by Jacek Klos
*revised for Ar-OH(A^2Sigma+) 2005 J.Klos
*revised for Ne-NO(2Sigma Rydberg) 2007 J.Klos
* ----------------------------------------------------------------------

      implicit double precision (a-h,o-z)
      dimension vsum(11),xsum(11),
     :          d0(121),aa(121),thta(11),cthta(11)
      dimension kpvt(11),qraux(11),work(121),rsd(11)

      common /covvl/ vvl(10)
      data half, zero, one, alph /0.5d0, 0.d0, 1.d0, 1.2d0/
* for distances beyond rmax difference potential is damped
      data rmax /13d0/
* coefficicients for d0 rotation matrices
* stored (by column) for each of 7 angles and for l=0:6
* angles are 0 20 40 60 80 90 100 120 140 160 180
      data d0/
     :  1.d0,!l=0
     :  1.d0,
     :  1.d0,
     :  1.d0,
     :  1.d0,
     :  1.d0,
     :  1.d0,
     :  1.d0,
     :  1.d0,
     :  1.d0,
     :  1.d0,!l=0
     :                    1.d0, !l=1
     :    0.939692620785908d0,
     :    0.766044443118978d0,
     :                  0.5d0,
     :     0.17364817766693d0,
     :                  1d-16,
     :    -0.17364817766693d0,
     :                 -0.5d0,
     :   -0.766044443118978d0,
     :   -0.939692620785908d0,
     :                   -1d0, !l=1
     :                    1d0, !l=2
     :    0.824533332339233d0, 
     :    0.380236133250197d0,
     :               -0.125d0,
     :   -0.454769465589431d0,
     :                 -0.5d0,
     :   -0.454769465589431d0,
     :               -0.125d0,
     :    0.380236133250197d0,
     :    0.824533332339233d0,
     :                    1d0, !l=2
     :                    1d0, !l=3
     :    0.664884732794716d0, 
     :  -0.0252333338303835d0,
     :              -0.4375d0,
     :   -0.247381933374901d0,
     :                  1d-16,
     :    0.247381933374901d0,
     :               0.4375d0,
     :   0.0252333338303835d0,
     :   -0.664884732794716d0,
     :                   -1d0, !l=3
     : 1d0,                   !l=4
     :    0.474977735636283d0,
     :   -0.319004346471378d0,
     :           -0.2890625d0,
     :    0.265901610835095d0,
     :                0.375d0,
     :    0.265901610835095d0,
     :           -0.2890625d0,
     :   -0.319004346471378d0,
     :    0.474977735636283d0,
     :                    1d0,!l=4
     :  1.d0,                 !l=5
     :    0.271491745551255d0,
     :   -0.419682045437054d0,
     :           0.08984375d0,
     :    0.281017540988309d0,
     :                  1d-16,
     :   -0.281017540988309d0,
     :          -0.08984375d0,
     :    0.419682045437054d0,
     :   -0.271491745551255d0,
     :                   -1d0,!l=5
     :                   1.d0,!l=6
     :   0.0719030017842305d0,
     :   -0.323570725710931d0,
     :         0.3232421875d0,
     :   -0.132121338573299d0,
     :              -0.3125d0,
     :   -0.132121338573299d0,
     :         0.3232421875d0,
     :   -0.323570725710931d0,
     :   0.0719030017842305d0,
     :                    1d0, !l=6
     :                    1d0, !l=7
     :   -0.107226158692938d0,
     :   -0.100601708629502d0,
     :        0.22314453125d0,
     :   -0.283479918813435d0,
     :                  1d-16,
     :    0.283479918813435d0,
     :       -0.22314453125d0,
     :    0.100601708629502d0,
     :    0.107226158692938d0,
     :                   -1d0,!l=7
     :                    1d0,!l=8
     :   -0.251839432959275d0,
     :    0.138626797752243d0,
     :   -0.073638916015625d0,
     :   0.0233078500507821d0,
     :            0.2734375d0,
     :   0.0233078500507821d0,
     :   -0.073638916015625d0,
     :    0.138626797752243d0,
     :   -0.251839432959275d0,
     :                    1d0,!l=8
     :                    1d0, !l=9
     :   -0.351696543958561d0,
     :    0.290012951832139d0,
     :   -0.267898559570312d0,
     :    0.259627174131175d0,
     :                  1d-16,
     :   -0.259627174131175d0,
     :    0.267898559570312d0,
     :   -0.290012951832139d0,
     :    0.351696543958561d0,
     :                   -1d0, !l=9
     :                    1d0, !l=10
     :   -0.401269139852809d0,
     :    0.297345221371711d0,
     :   -0.188228607177734d0,
     :   0.0646821277096134d0,
     :          -0.24609375d0,
     :   0.0646821277096134d0,
     :   -0.188228607177734d0,
     :    0.297345221371711d0,
     :   -0.401269139852809d0,
     :                    1d0/!l=10
      thta(1)=0.D0
      thta(2)=20.D0
      thta(3)=40.D0
      thta(4)=60.D0
      thta(5)=80.D0
      thta(6)=90.D0
      thta(7)=100.D0
      thta(8)=120.D0
      thta(9)=140.D0
      thta(10)=160.D0
      thta(11)=180.D0
      do i=1,11
      cthta(i)=dcos(thta(i)*dacos(-1.D0)/180.D0)
      enddo
      do 100 i=1,11
        vsum(i)=EnergyPBF(r*0.529177249d0,thta(i),1,1,1)
100   continue
* solve simultaneous equations for solutions
      tol=1.e-10
      call dcopy(121,d0,1,aa,1)
      call dqrank(aa,11,11,11,tol,kr,kpvt,qraux,work)
      call dqrlss(aa,11,11,11,kr,vsum,xsum,rsd,kpvt,qraux)
* convert to hartree
      conv=1.d0/219474.63067d0
      call dscal(11,conv,xsum,1)
      vv0=xsum(1)
      call dcopy(10,xsum(2),1,vvl,1)
      end


      FUNCTION EnergyPBF(r,alfa,nest,nt,nunid)
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c     Estimael potencial para el r y el alfa dados            c
c     utilizando splines	                              c
c     nest: estado (0 fund, 1 Rydberg)                        c
c     nt: cant. de terminos del desarrollo                    c
c         si es 0 devuelve solo la componente isotropica      c
c         cualquier otro numero toma 5 terminos               c
c     nunid: 0,1,2 resultado en hartree,cm-1,meV              c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      DIMENSION CF1FUND(6,27),CF2FUND(6,27),CF1RYD(6,21),CF2RYD(6,21)
      DATA CF1FUND/
     . 2.50, .01272788, .00334396, .01103473, .00299084, .00300695,
     . 2.60, .00802194, .00239056, .00727079, .00206130, .00198068,
     . 2.70, .00492458, .00168099, .00475300, .00141213, .00130242,
     . 2.75, .00380762, .00140116, .00382975, .00116643, .00105549,
     . 2.80, .00291017, .00116319, .00307784, .00096221, .00085494,
     . 2.90, .00161878, .00079209, .00197013, .00065190, .00055987,
     . 3.00, .00080602, .00052988, .00124242, .00043903, .00036560,
     . 3.10, .00030691, .00034704, .00076807, .00029372, .00023791,
     . 3.20, .00001109, .00022134, .00046184, .00019498, .00015409,
     . 3.30,-.00015483, .00013643, .00026653, .00012812, .00009914,
     . 3.40,-.00023926, .00007990, .00014386, .00008325, .00006323,
     . 3.50,-.00027367, .00004309, .00006815, .00005338, .00003991,
     . 3.60,-.00027882, .00001969, .00002299, .00003362, .00002479,
     . 3.70,-.00026645, .00000421,-.00000285, .00002137, .00001465,
     . 3.80,-.00024724,-.00000334,-.00001729, .00001237, .00000904,
     . 3.90,-.00022378,-.00000811,-.00002401, .00000709, .00000522,
     . 4.00,-.00019966,-.00001035,-.00002634, .00000375, .00000281,
     . 4.25,-.00014497,-.00001075,-.00002361, .00000020, .00000030,
     . 4.50,-.00010335,-.00000858,-.00001746,-.00000049,-.00000031,
     . 4.75,-.00007358,-.00000624,-.00001220,-.00000062,-.00000032,
     . 5.00,-.00005297,-.00000438,-.00000818,-.00000053,-.00000028,
     . 5.50,-.00002864,-.00000203,-.00000377,-.00000026,-.00000015,
     . 6.00,-.00001624,-.00000103,-.00000197,-.00000008, .00000003,
     . 6.50,-.00000988,-.00000052,-.00000097,-.00000002, .00000002,
     . 7.00,-.00000624,-.00000032,-.00000057, .00000000, .00000001,
     . 8.00,-.00000283,-.00000008,-.00000020,-.00000004,-.00000002,
     .10.00,-.00000088, .00000005,-.00000003,-.00000005,-.00000003/
      DATA CF2FUND/
     . 2.50,-0.05693161,-0.01092895,-0.04527454,-0.01097729,-0.01241132,
     . 2.60,-0.03808937,-0.00822665,-0.03069694,-0.00775198,-0.00831551,
     . 2.70,-0.02480990,-0.00605353,-0.02038961,-0.00537610,-0.00546252,
     . 2.75,-0.02000362,-0.00515943,-0.01664455,-0.00447527,-0.00444439,
     . 2.80,-0.01604023,-0.00437676,-0.01354181,-0.00371803,-0.00360873,
     . 2.90,-0.01018710,-0.00310998,-0.00892057,-0.00255701,-0.00237694,
     . 3.00,-0.00633586,-0.00218262,-0.00583852,-0.00174933,-0.00156373,
     . 3.10,-0.00382555,-0.00151105,-0.00378714,-0.00119105,-0.00102695,
     . 3.20,-0.00220983,-0.00102940,-0.00243031,-0.00080796,-0.00067376,
     . 3.30,-0.00118734,-0.00068966,-0.00153782,-0.00054510,-0.00044111,
     . 3.40,-0.00055130,-0.00045515,-0.00095780,-0.00036354,-0.00028760,
     . 3.50,-0.00017265,-0.00028994,-0.00058236,-0.00024296,-0.00018538,
     . 3.60, 0.00005511,-0.00019138,-0.00033884,-0.00015354,-0.00012407,
     . 3.70, 0.00016882,-0.00011092,-0.00019226,-0.00010317,-0.00007613,
     . 3.80, 0.00021702,-0.00005582,-0.00010052,-0.00007127,-0.00004390,
     . 3.90, 0.00024320,-0.00003539,-0.00004047,-0.00004016,-0.00003116,
     . 4.00, 0.00023756,-0.00001291,-0.00000911,-0.00002670,-0.00001834,
     . 4.25, 0.00019432, 0.00000607, 0.00002295,-0.00000579,-0.00000458,
     . 4.50, 0.00014087, 0.00000988, 0.00002386,-0.00000101,-0.00000078,
     . 4.75, 0.00009887, 0.00000852, 0.00001852,-0.00000001, 0.00000025,
     . 5.00, 0.00006820, 0.00000644, 0.00001343, 0.00000055, 0.00000014,
     . 5.50, 0.00003370, 0.00000308, 0.00000532, 0.00000048, 0.00000039,
     . 6.00, 0.00001740, 0.00000133, 0.00000253, 0.00000022, 0.00000018,
     . 6.50, 0.00000926, 0.00000067, 0.00000134, 0.00000006,-0.00000007,
     . 7.00, 0.00000555, 0.00000027, 0.00000049, 0.00000001,-0.00000001,
     . 8.00, 0.00000207, 0.00000019, 0.00000026,-0.00000005,-0.00000003,
     .10.00,-0.00000014,-0.00000003,-0.00000006, 0.00000002, 0.00000001/
      DATA CF1RYD/
     . 3.00, .00336018,-.00023975,-.00015209, .00029680, .00025958,
     . 3.10, .00286782,-.00030124,-.00036401, .00019103, .00016677,
     . 3.20, .00250180,-.00032488,-.00046490, .00012043, .00010702,
     . 3.30, .00221276,-.00032387,-.00049696, .00007344, .00006853,
     . 3.40, .00197147,-.00030775,-.00048794, .00004272, .00004357,
     . 3.50, .00176149,-.00028310,-.00045684, .00002299, .00002760,
     . 3.60, .00157155,-.00025403,-.00041423, .00001030, .00001736,
     . 3.70, .00139797,-.00022427,-.00036799, .00000261, .00001086,
     . 3.80, .00123710,-.00019491,-.00032181,-.00000221, .00000678,
     . 3.90, .00108860,-.00016777,-.00027816,-.00000474, .00000418,
     . 4.00, .00095208,-.00014292,-.00023827,-.00000591, .00000255,
     . 4.25, .00066069,-.00009270,-.00015758,-.00000605, .00000091,
     . 4.50, .00043781,-.00005729,-.00010075,-.00000507, .00000015,
     . 4.75, .00027666,-.00003420,-.00006433,-.00000363, .00000056,
     . 5.00, .00016135,-.00001909,-.00003828,-.00000284,-.00000006,
     . 5.50, .00003617,-.00000513,-.00001328,-.00000119,-.00000004,
     . 6.00,-.00001071,-.00000067,-.00000366,-.00000047,-.00000009,
     . 6.50,-.00002298, .00000080,-.00000060,-.00000038,-.00000001,
     . 7.00,-.00002223, .00000089, .00000024,-.00000013, .00000007,
     . 8.00,-.00001310, .00000040, .00000037, .00000010, .00000000,
     .10.00,-.00000397, .00000026, .00000020,-.00000007, .00000006/
       DATA CF2RYD/
     . 3.00,-0.00571983,-0.00084815,-0.00281502,-0.00127208,-0.00113273,
     . 3.10,-0.00420613,-0.00040302,-0.00149109,-0.00086181,-0.00074245,
     . 3.20,-0.00320706,-0.00009368,-0.00060493,-0.00057177,-0.00047426,
     . 3.30,-0.00261742, 0.00009884,-0.00007770,-0.00037881,-0.00030772,
     . 3.40,-0.00223316, 0.00021222, 0.00022452,-0.00024431,-0.00019837,
     . 3.50,-0.00198805, 0.00027536, 0.00038321,-0.00015747,-0.00012670,
     . 3.60,-0.00181226, 0.00029792, 0.00045392,-0.00009841,-0.00008112,
     . 3.70,-0.00166853, 0.00029785, 0.00046660,-0.00006027,-0.00005102,
     . 3.80,-0.00154711, 0.00028428, 0.00045227,-0.00003580,-0.00003220,
     . 3.90,-0.00142412, 0.00026004, 0.00041924,-0.00001702,-0.00002059,
     . 4.00,-0.00130703, 0.00023527, 0.00037699,-0.00000712,-0.00001233,
     . 4.25,-0.00102621, 0.00016942, 0.00027300, 0.00000296,-0.00000411,
     . 4.50,-0.00075939, 0.00011461, 0.00018123, 0.00000536,-0.00000003,
     . 4.75,-0.00054459, 0.00007413, 0.00012106, 0.00000465, 0.00000002,
     . 5.00,-0.00037975, 0.00004726, 0.00008417, 0.00000280,-0.00000257,
     . 5.50,-0.00015081, 0.00001458, 0.00002806, 0.00000274, 0.00000064,
     . 6.00,-0.00004936, 0.00000495, 0.00001130, 0.00000046,-0.00000018,
     . 6.50,-0.00000664, 0.00000120, 0.00000282, 0.00000026, 0.00000027,
     . 7.00, 0.00000679,-0.00000039, 0.00000084, 0.00000052, 0.00000005,
     . 8.00, 0.00000891,-0.00000042,-0.00000017, 0.00000005,-0.00000009,
     .10.00, 0.00000145, 0.00000019,-0.00000010,-0.00000022, 0.00000010/

c      if (nest.eq.0) then
c               npunt=27
c               cf1='coefFund5x5BF.dat'
c               cf2='paraFund5x5BF.dat'
c         else
c                npunt=21
c               cf1='coefRyd5x5BF.dat'
c               cf2='paraRyd5x5BF.dat'
c      endif
      if (nunid.eq.1) then
                cv=219474.63067d0
         else
                cv=27211.39610d0
      endif
      if (nunid.eq.0) cv=1.0d0
      jmax=5
      if (nt.eq.0)jmax=1
      sum=0.0d0
      do j=1,jmax
         if (nest.eq.0) then
         npunt=27
         f=splg(j,r,cf1fund,cf2fund,npunt,jmax)
         else
         npunt=21 
         f=splg(j,r,cf1ryd,cf2ryd,npunt,jmax)
         endif
         p=plgndr(j-1,0,alfa,1,1)
         sum=sum+f*p
      enddo
      EnergyPBF=sum*cv
      return
      end


      FUNCTION splg(no,r,cf1,cf2,npunt,jmax)
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c     Calcula f(no,r) por splines, siendo para                c
c     f0, no=1;f1, no=2,...f4, no=5                           c
c     r el valor donde se desea interpolar                    c
c     cf1,2: fichero donde leer x,f(i,1),f(i,2)               c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      implicit real*8 (a-h,o-z)
      dimension u(4),f(npunt,2),x(npunt),g(npunt,2,jmax)
      dimension cf1(jmax+1,npunt),cf2(jmax+1,npunt)
c      open(unit=7, file=cf1)
c      open(unit=8, file=cf2)
      do i=1,npunt
      x(i)=cf1(1,i)
      do j=1,jmax
      g(i,1,j)=cf1(j+1,i)
      g(i,2,j)=cf2(j+1,i)
      enddo
c           read(7,*)x(i),(g(i,1,j),j=1,jmax)
c           read(8,*)x(i),(g(i,2,j),j=1,jmax)
      enddo
c      close(7)
c      close(8)
      do i=1,npunt
         f(i,1)=g(i,1,no)
         f(i,2)=g(i,2,no)
      enddo
      nx=npunt
      iold=2
      if(r.ge.x(nx)) then
           ro=x(nx)
           yo=f(nx,1)
           yp=f(nx,2)
           ain=yo+yp*ro/6.d0
           c8=-ain*3.d0*ro**8
           c6=yo*ro**6-c8/ro/ro
           splg=c6/r**6+c8/r**8
        else
           do 10 idol = iold, nx
           if(r.lt.x(idol)) goto 20
   10      continue
   20      iold = idol
           hi=x(idol)-x(idol-1)
           xr=(r-x(idol-1))/hi
           u(1)=xr*xr*(-2.0d0*xr+3.0d0)
           u(2)=1.0d0-u(1)
           u(3)=hi*xr*xr*(xr-1.0d0)
           u(4)=hi*xr*((xr-2.0d0)*xr+1.0d0)
           splg=u(1)*f(idol,1)+u(2)*f(idol-1,1)+
     &          u(3)*f(idol,2)+u(4)*f(idol-1,2)
      endif
      return
      end


        FUNCTION plgndr(l,m,xx,narg,norm)
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c       Calcula el polinomio asociado de Legendre                   c
c       con m y l interos tales que 0<=m<=l y  -1<=x<=1             c
c       si norm=1 lo da normalizado                                 c
c       si narg=1 transforma x en cos(x) O sea x fue dado en grados c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
       implicit double precision (a-h,o-y)

        pi=4.0d0*datan(1.0d0)
        xnorma=dsqrt(2.d0/(2.d0*float(l)+1.d0))
        if(narg.eq.1) then
              x=dcos(xx*pi/180)
           else
              x=xx
        endif
        if(m.lt.0.or.m.gt.l.or.abs(x).gt.1.)pause 'argumentos malos'
        pmm=1.0d0
        if(m.gt.0) then
            somx2=sqrt((1.0d0-x)*(1.0d0+x))
            fact=1.0d0
            do i=1,m
               pmm=-pmm*fact*somx2
                 fact=fact+2.0d0
            enddo
        endif
        if(l.eq.m) then
            plgndr=pmm
        else
            pmmp1=x*(2*m+1)*pmm
            if(l.eq.m+1) then
                  plgndr=pmmp1
               else
                  do ll=m+2,l
                  pll=(x*(2*ll-1)*pmmp1-(ll+m-1)*pmm)/(ll-m)
                        pmm=pmmp1
                        pmmp1=pll
                  enddo
                  plgndr=pll
            endif
        endif
        if( norm.eq.1) then
           plgndr=plgndr/xnorma
        endif
        return
        END

