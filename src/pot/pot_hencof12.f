*  routines to calculate the potentials for NCO(2Pi)-He(1S) RCCSD(T)-F12a/vtz-f12 interaction
*  of pi + atom scattering
*  This use ab initio points directly and spline fit them.
*  author: Moonbong Yang 27-sep-1995
*  revision: Moonbong Yang 23-oct-1996
*  revision:  mha 4-apr-1997
*  latest revision : Tchakoua_T 19-nov-2017
*  E-mail :   tchaktheo@yahoo.fr
      subroutine driver
      implicit double precision (a-h,o-z)
      common /cosysr/ xjunk(2),rshift,xfact
      common /covvl/ vvl(17)

      include "common/parpot"
      potnam='NCO-He(2Pi) PES'
      print *, potnam

1      print *, ' r (bohr)'
      rshift=0.5
      xfact=0.8
      read (5, *, end=99) r
      call pot(vv0,r)
      write (6, 100) vv0,vvl
100   format(' vsum',/,7(1pe16.8))
      goto 1
99    end
*         open(1,file='vlam.dat',status='unknown')
*      rstart = 4.5d0
*      rstep = 0.1
*      do i = 0,200
*         r = rstart+i*rstep
*         call pot(vv0,r)
*         write(1,'(23(g14.6,2x))') r,vv0,(vvl(j), j=1,17)
*      end do
*      end
*23456789 123456789 123456789 123456789 123456789 123456789 123456789 12

      include "common/syusr"
      include "common/bausr"
      include "common/ground"
* ----------------------------------------------------------------
      subroutine loapot(iunit,filnam)
* ----------------------------------------------------------------
      character*(*) filnam
      include "common/parbas"
      include "common/parpot"
      potnam='NCO-He(2XPi) PES'

      lammin(1)=1
      lammax(1)=9
      lammin(2)=2
      lammax(2)=9
      mproj(1)=0
      mproj(2)=2
      ntv(1)=1
      ivcol(1,1)=0
      ivrow(1,1)=0

      return
      end
*23456789 123456789 123456789 123456789 123456789 123456789 123456789 12

* ----------------------------------------------------------------------
      subroutine pot_setup
* ----------------------------------------------------------------------

*  this routine is to interpolate ab initio data
*  using piecewise cubic spline routine
*  For the range shorter than ab initio points,
*  Use single expontial for extrapolate using
*  two of the innermost r points.
*  For the range longer than ab initio points,
*  Use leading long range r^(-n) term to extrapolate,
*  while c_coeffincent were obtained from the
*  outermost ab initio points.
*
*     calculate the short range potential
*     V = A * exp (-alpha * r)
*     evaluate A and alpha from the innermost two ab initio points
*                  1           v1
*     alpha =  ---------  log -----
*               r2 - r1        v2
*
*       A   =  v1 * exp (alpha * r1)
*     using alpha and A, evaluate the potential shorter than
*     calculated ab initio points
*
*     calculate long range potential from the outermost ab initio value
*     for dispersion and induction, the leading long range term may vary
*     if r^(-n) term is leading
*     coef = - v1 * r1 ^ n
*     then potential energy can be evaluated as
*             coef
*     v = - --------
*            r1 ^ n
*
*     For both dispersion (c6) and induction(c8) exist,
*     use two of the last points
*     c6 = (r1^8 * v1 - r2^8 * v2)/(r2^2-r1^2)
*     c8 = -0.5 [c6*(r1^2 + r2^2) + r1^8*v1 + r2^8*v2]

* ----------------------------------------------------------------------

      implicit double precision (a-h,o-z)
      parameter (nang=10,na12=8,nsp=10,n12=8)
      parameter (nr=36,npsp=nr*nsp,np12=nr*n12)

      dimension x(nr),vs(360),vp(360),
     :          aas(nang),aap(nang),aa1(na12),aa2(na12),
     :          alps(nang),alpp(nang),alp1(na12),alp2(na12),
     :          cfs6(nang),cfp6(nang),cfs8(nang),cfp8(nang),
     :          cf16(na12),cf26(na12),cf18(na12),cf28(na12),
     :          ccs(nang,4,nr),ccp(nang,4,nr),cc1(na12,4,nr),
     :          cc2(na12,4,nr),vv1(nr),c1(4,nr),vv2(nr),c2(4,nr)

      common /setup/ aas,aap,aa1,aa2,alps,alpp,alp1,alp2,
     :               cfs6,cfs8,cfp6,cfp8,ccs,ccp,cc1,cc2

      data half, zero, one, two /0.5d0, 0.d0, 1.d0, 2.d0/

c     x where ab initio data available
      data x/4.50,4.75,5.0,5.25,5.5,5.75,6.0,
     : 6.25,6.5,6.75,7.0,7.25,7.5,7.75,8.0,8.25,8.5,8.75,
     : 9.0,9.25,9.5,9.75,10.0,10.25,10.5,10.75,11.0,11.25,
     : 11.50,11.75,12.0,13.0,14.0,16.0,18.0,20.0/

**    ab initio data points Here
**    Vs, Vp for angles [ 0 20 40 60 80 100 120 140 160 180 ]
      data vs/
     : 39953.2641065677,23811.0080693023,13981.4930991367,
     : 8094.6973834171,4618.1075257304,2585.5318831009,
     : 1413.3385829355,747.7541964901,376.0893003131,
     : 173.0720661237,65.5950215964,11.2455460616,
     : -14.2264603721,-24.4279301661,-26.8783053238,
     : -25.6523884527,-22.9157996966,-19.7326942863,
     : -16.6267025091,-13.8345313892,-11.4401388146,
     : -9.4480483230,-7.8241904774,-6.5141774113,
     : -5.4551760592,-4.5925612169,-3.8854777470,
     : -3.3047934110,-2.8254957021,-2.4304392875,
     : -2.1003683088,-1.2283527464,-0.7554625105,
     : -0.2785667765,-0.1103291985,-0.0534627670, !0.0-vtz-f12
     : 25190.7320862028,15241.0847508859,9070.6248042243,
     : 5311.8214703909,3055.8208928497,1720.7434106709,
     : 942.3715738635,496.0760190291,245.1600142792,
     : 107.6133962231,34.8490252110,-1.5933546857,
     : -18.1508272932,-24.1765394932,-24.8871141900,
     : -23.1225905130,-20.4020097639,-17.4898974144,
     : -14.7435022064,-12.3102127706,-10.2308174668,
     : -8.4940894711,-7.0635612809,-5.8931802472,
     : -4.9372445788,-4.1565227630,-3.5153215173,
     : -2.9893823139,-2.5562594671,-2.1979928946,
     : -1.9005774723,-1.1122486787,-0.6847992445,
     : -0.2670830607,-0.1120897811,-0.0549355528, !20.0-vtz-f12
     : 7843.6723285976,4803.2550594632,2885.2290868213,
     : 1695.9342251655,970.9378809217,536.7768138654,
     : 281.8571659511,135.5718357836,54.1261344624,
     : 10.6886821332,-10.9118721260,-20.3218889352,
     : -23.1652308194,-22.6736556701,-20.6638982509,
     : -18.1045286557,-15.5153136764,-13.1200349539,
     : -11.0134523982,-9.2149979855,-7.7055607145,
     : -6.4515306788,-5.4154175987,-4.5623583685,
     : -3.8590192688,-3.2781560977,-2.7989370508,
     : -2.4017700266,-2.0709564970,-1.7943085810,
     : -1.5615019900,-0.9316246661,-0.5848024807,
     : -0.2451496696,-0.1086162709,-0.0546062626, !40.0-vtz-f12
     : 1713.1027427492,995.6374081841,557.3501146116,
     : 295.1232575089,141.9175088254,55.1872194775,
     : 8.4786606402,-15.0570669848,-25.3609681210,
     : -28.4270456289,-27.7347102973,-25.2972036556,
     : -22.2146216795,-18.8637516435,-16.1570825177,
     : -13.5742489537,-11.3552516471,-9.4809030717,
     : -7.9171025600,-6.6221703353,-5.5543713285,
     : -4.6753927518,-3.9525809567,-3.3559673304,
     : -2.8620018345,-2.4533877283,-2.1133631510,
     : -1.8291444516,-1.5901584833,-1.3881854148,
     : -1.2163154865,-0.7389686652,-0.4653287627,
     : -0.2073832369,-0.1000335171,-0.0523319920, !60.0-vtz-f12
     : 427.9179311546,195.5156671017,67.4004959909,
     : 0.4442888612,-31.4789682369,-44.0355469877,
     : -46.3185701742,-43.6675736235,-38.9061903107,
     : -33.5648998086,-28.4008947412,-23.7577693818,
     : -19.7405058016,-16.3490240824,-13.5269105435,
     : -11.4193397711,-9.2843746085,-7.7178042930,
     : -6.4361954576,-5.3901809384,-4.5353226605,
     : -3.8351401863,-3.2603982087,-2.7839154988,
     : -2.3888918865,-2.0590743036,-1.7824460742,
     : -1.5495177869,-1.3524972636,-1.1852537919,
     : -1.0422360633,-0.6410811145,-0.4081023816,
     : -0.1856351783,-0.0907355799,-0.0499294806, !80.0-vtz-f12
     : 707.1741420151,383.9087899362,192.6545545447,
     : 82.4468958696,21.3684668247,-10.6106363659,
     : -25.6264603148,-31.2349229189,-31.7342183860,
     : -29.6779541524,-26.5123255832,-23.0467086037,
     : -19.6944128267,-16.6560868751,-14.2236233510,
     : -11.9570425052,-9.8257108125,-8.2293182111,
     : -6.9014093747,-5.8019856571,-4.8927252165,
     : -4.1409020373,-3.5193314364,-3.0017066155,
     : -2.5712971900,-2.2114384549,-1.9095272958,
     : -1.6553771514,-1.4405752298,-1.2585018688,
     : -1.1034145363,-0.6728175004,-0.4284295944,
     : -0.1919238450,-0.0930127442,-0.0514413213, !100.0-vtz-f12
     : 2807.3780931562,1755.7445996500,1076.1970094185,
     : 643.0604154354,371.0555214658,203.3295356704,
     : 102.1520571559,42.6553919869,9.0355163153,
     : -8.8546066735,-17.3916538700,-20.5424337973,
     : -20.7304902777,-19.4078417251,-17.4222242028,
     : -15.2488226648,-13.1392449688,-11.4337554961,
     : -9.5144294610,-8.0511217083,-6.8066958899,
     : -5.7572840853,-4.8777515465,-4.1411286546,
     : -3.5244908436,-3.0034687190,-2.5784892211,
     : -2.2173459788,-1.9121529937,-1.6551679380,
     : -1.4376947599,-0.8452624495,-0.5218920262,
     : -0.2226499630,-0.1078416106,-0.0576282895,  !120.0-vtz-f12
     : 11754.9492800302,7668.9417218524,4917.8371305101,
     : 3099.5499653576,1917.7324016628,1161.8444909950,
     : 685.9694386354,391.3449474041,212.2644613766,
     : 105.7966668065,44.2668235268,10.1003429092,
     : -7.7483312246,-16.1090990210,-19.1291406867,
     : -19.2768842431,-17.9931330539,-16.0981732262,
     : -14.0427944745,-12.0636063501,-10.2686556039,
     : -8.6964314628,-7.3477604826,-6.2056028969,
     : -5.2466731434,-4.4427025408,-3.7722422220,
     : -3.2125808286,-2.7435862035,-2.3533888742,
     : -2.0247392947,-1.1483579849,-0.6876124425,
     : -0.2830765507,-0.1283707944,-0.0639369450,  !140.0-vtz-f12
     : 41114.8203275719,26928.6896537922,17242.8988188406,
     : 10846.6637548456,6718.5424872191,4099.5251924605,
     : 2461.5689376845,1450.6681902659,835.0900877453,
     : 465.6382816160,247.5635825006,121.4377217355,
     : 50.4560241364,12.0167318301,-7.5886960911,
     : -16.5355191596,-19.6338077287,-19.6766399659,
     : -18.2521094168,-16.2362023488,-14.0913875256,
     : -12.0482820147,-10.2098034199,-8.6095708617,
     : -7.2455062575,-6.0980693926,-5.1414843540,
     : -4.3440333784,-3.6820928257,-3.1321600358,
     : -2.6742002699,-1.4791028551,-0.8673512034,
     : -0.3450729103,-0.1529385002,-0.0741534899, !160.0-vtz-f12
     : 72838.0886276007,46673.2318777482,29317.2552738473,
     : 18160.3028113414,11111.5627380539,6718.9455872152,
     : 4014.2460989672,2363.4082179278,1366.2610526418,
     : 771.0923676278,420.7119039518,217.6519857805,
     : 102.3271510272,38.7056507569,5.1309560387,
     : -11.3274011677,-18.0593136521,-20.2530089133,
     : -19.6461851077,-17.8817849702,-15.7100519935,
     : -13.5100000306,-11.4604491466,-9.6386317293,
     : -8.0726101097,-6.7631347668,-5.6875429695,
     : -4.8047956398,-4.0746009615,-3.4652862224,
     : -2.9585912807,-1.6362457384,-0.9568583008,
     : -0.3837676593,-0.1631448573,-0.0858752471/ !180.0-vtz-f12
c------------------------------------------------------------------
      data vp/
     : 39953.2641065677,23811.0080693023,13981.4930991367,
     : 8094.6973834171,4618.1075257304,2585.5318831009,
     : 1413.3385829355,747.7541964901,376.0893003131,
     : 173.0720661237,65.5950215964,11.2455460616,
     : -14.2264603721,-24.4279301661,-26.8783053238,
     : -25.6523884527,-22.9157996966,-19.7326942863,
     : -16.6267025091,-13.8345313892,-11.4401388146,
     : -9.4480483230,-7.8241904774,-6.5141774113,
     : -5.4551760592,-4.5925612169,-3.8854777470,
     : -3.3047934110,-2.8254957021,-2.4304392875,
     : -2.1003683088,-1.2283527464,-0.7554625105,
     : -0.2785667765,-0.1103291985,-0.0534627670, !0.0-vtz-f12
     : 22494.7932100473,13820.8692373922,8279.8593218045,
     : 4855.8705080505,2787.3914338510,1560.6185124627,
     : 846.1808625941,438.0579652207,210.1433047615,
     : 86.5116408443,22.1753021275,-9.1657204055,
     : -22.6461276807,-26.8241432888,-26.4361103594,
     : -24.0139882335,-20.9025172331,-17.7536814977,
     : -14.8648652848,-12.3465497163,-10.2196499978,
     : -8.4602460849,-7.0233548071,-5.8558804840,
     : -4.9064937411,-4.1342287141,-3.5002908891,
     : -2.9806260461,-2.5524412140,-2.1983388828,
     : -2.1420311588,-1.1171369466,-0.6909304839,
     : -0.2743494131,-0.1183072337,-0.0571814761, !20.0-vtz-f12
     : 6394.4662170432,3901.4867028700,2321.2030093461,
     : 1342.3835101830,749.4103437932,398.2446593927,
     : 195.5324106582,82.0166441194,21.1144503777,
     : -9.5169883216,-23.1765482842,-27.6832896419,
     : -27.5349765965,-25.2316558282,-22.1311641336,
     : -18.9288878531,-15.9517475384,-13.3293930795,
     : -11.0899347429,-9.2155165312,-7.6648843938,
     : -6.3910344628,-5.3478288042,-4.4943542022,
     : -3.7947681451,-3.2193357409,-2.7462811936,
     : -2.3551467823,-2.0304266285,-1.9986271023,
     : -1.5323698479,-0.9196198663,-0.5793798916,
     : -0.2499582615,-0.1159579328,-0.0569782216, !40.0-vtz-f12
     : 1559.0078857338,889.6078795027,485.3439477494,
     : 246.7487080171,109.8815457263,34.3799716419,
     : -4.9549033439,-23.5984476457,-30.7066963304,
     : -31.7002360056,-29.6959573047,-26.4358461524,
     : -22.8454735750,-19.3971242739,-16.2967376126,
     : -13.6106996402,-11.3329205829,-9.4277778854,
     : -7.8490091114,-6.5483512257,-5.4804520578,
     : -4.6043936842,-3.8860692445,-3.2940336531,
     : -2.8054018696,-2.4017024921,-2.0675937802,
     : -1.7887351358,-1.5544755763,-1.3577619139,
     : -1.1909759528,-0.7302594882,-0.4660957559,
     : -0.2126020791,-0.1028532670,-0.0536705151, !60.0-vtz-f12
     : 523.4414295422,258.1206989122,108.0723784465,
     : 26.9218522198,-14.4259655363,-33.0412386242,
     : -39.2060528943,-39.0418170713,-35.8807920125,
     : -31.5707719830,-27.0708269976,-22.8562551505,
     : -19.1138933446,-15.8995117692,-13.1933739634,
     : -10.9402141721,-9.0780482935,-7.5464130244,
     : -6.2903455908,-5.2643396118,-4.4257140447,
     : -3.7399442654,-3.1779021643,-2.7123454252,
     : -2.3273465774,-2.0067265460,-1.7377900651,
     : -1.5124226188,-1.3221063059,-1.1607043507,
     : -1.0222286834,-0.6354973956,-0.4119399407,
     : -0.1944128667,-0.0939108734,-0.0511053079, !80.0-vtz-f12
     :  503.3974517521,250.7780326959,106.1457604110,
     : 26.7718401235,-13.9975586548,-32.7993505150,
     : -39.3772228112,-39.5032590737,-36.5463814901,
     : -32.3428582283,-27.8723244495,-23.6314278801,
     : -19.8372733938,-16.5586786778,-13.7850427411,
     : -11.7028663486,-9.7833738717,-7.9639872422,
     : -6.6576931534,-5.5830433958,-4.6996470970,
     : -3.9723562548,-3.3731752853,-2.8755771379,
     : -2.4634506466,-2.1191858109,-1.8309772679,
     : -1.5888463514,-1.3858320777,-1.2117063228,
     : -1.0648267456,-0.6544113938,-0.4216608286,
     : -0.1980269268,-0.0966795673,-0.0527078719, !100.0-vtz-f12
     : 1618.9193733708,976.3365966683,568.3101851541,
     : 314.5609917059,160.1280218747,68.9157176516,
     : 17.2720403018,-10.3848652347,-23.6789510183,
     : -28.7109769482,-29.1879559026,-27.3451252664,
     : -24.4831776858,-21.3303510278,-18.2712712904,
     : -15.7138631492,-13.0488855916,-10.9584685229,
     : -9.1923655363,-7.7148772800,-6.4850140893,
     : -5.4640092275,-4.6174162924,-3.9147106240,
     : -3.3297641429,-2.8371957886,-2.4372034602,
     : -2.0972101963,-1.8124573789,-1.5709157159,
     : -1.3672951304,-0.8117498625,-0.5049967504,
     : -0.2218787097,-0.1105997483,-0.0583383683, !120.0-vtz-f12
     : 7748.4693902794,5193.4198672795,3388.6495978288,
     : 2152.8928703483,1330.7117906995,797.5638314339,
     : 460.3280942519,251.8630553054,126.4259915988,
     : 53.3118331692,12.4914524065,-8.8716225241,
     : -18.8916275084,-22.4616901664,-22.6058551704,
     : -21.0482044025,-18.7764925983,-16.3230470536,
     : -13.9703519324,-11.8461529499,-9.9926930592,
     : -8.4092490138,-7.0737563154,-5.9561710513,
     : -5.0260770924,-4.2512912480,-3.6084532573,
     : -3.0739805968,-2.6285404893,-2.2564755625,
     : -1.9443822195,-1.1113507330,-0.6678441155,
     : -0.2788874640,-0.1317830698,-0.0662876392, !140.0-vtz-f12
     : 29068.7222005986,21178.9159890089,14551.1949005638,
     : 9500.6200954994,5999.5952625565,3697.3569037416,
     : 2230.0055452908,1314.6959010045,754.3658569599,
     : 417.4553349063,218.7831822418,104.3230073937,
     : 40.3163510707,6.1011754195,-10.9821086508,
     : -18.4176728541,-20.6208594026,-20.1406170102,
     : -18.4155345031,-16.2344864114,-14.0064182945,
     : -11.9269095733,-10.0783230447,-8.4815300962,
     : -7.1271429396,-5.9920599255,-5.0485692758,
     : -4.2645797427,-3.6152591346,-3.0769736350,
     : -2.6290039200,-1.4570770835,-0.8545239065,
     : -0.3426362150,-0.1550271238,-0.0764136854, !160.0-vtz-f12
     : 72838.0886276007,46673.2318777482,29317.2552738473,
     : 18160.3028113414,11111.5627380539,6718.9455872152,
     : 4014.2460989672,2363.4082179278,1366.2610526418,
     : 771.0923676278,420.7119039518,217.6519857805,
     : 102.3271510272,38.7056507569,5.1309560387,
     : -11.3274011677,-18.0593136521,-20.2530089133,
     : -19.6461851077,-17.8817849702,-15.7100519935,
     : -13.5100000306,-11.4604491466,-9.6386317293,
     : -8.0726101097,-6.7631347668,-5.6875429695,
     : -4.8047956398,-4.0746009615,-3.4652862224,
     : -2.9585912807,-1.6362457384,-0.9568583008,
     : -0.3837676593,-0.1631448573,-0.0858752471/ !180.0-vtz-f12
c------------------------------------------------------------------
      ibcbeg=0
      ibcend=0
** for Vs and Vp
      do i = 1, nang
         do j = 1, nr
            i1=(i-1)*nr
            k = i1 + j
            vv1(j)=vs(k)
            c1(1,j)=vs(k)
            vv2(j)=vp(k)
            c2(1,j)=vp(k)
         enddo
         call extpol (nr,x,vv1,aas(i),alps(i),cfs6(i),cfs8(i),1)
         call extpol (nr,x,vv2,aap(i),alpp(i),cfp6(i),cfp8(i),1)
         call cubspl (x,c1,nr,ibcbeg,ibcend)
         call cubspl (x,c2,nr,ibcbeg,ibcend)
         do l = 1, 4
           do j = 1, nr
             ccs(i,l,j) = c1(l,j)
             ccp(i,l,j) = c2(l,j)
           enddo
         enddo
      enddo

      return
      end
*23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
* ----------------------------------------------------------------------
      subroutine pot (vv0, r)
* ----------------------------------------------------------------------

*     subroutine to calculate the r-dependent coefficients for
*     NCO-He potentials from ab initio CCSD(T)-F12a potentials
*     in atomic units (distance and energy)

*     on entry:
*       r:  interparticle distance
*     on return:
*       vv0 contains isotropic term l=0
*       vvl variable in common block /covvl/
*           contains all oter terms
*           vsum  : l=0 to 9 vvl(1:9)
*           vfiff : l=2 to 9 vvl(10:17)

*      uses linear least squares routines from cmlib
* ----------------------------------------------------------------------

      implicit double precision (a-h,o-z)
      parameter (nang=10,na12=8,nsp=10,n12=8)
      parameter (nr=36,npsp=nr*nsp,np12=nr*n12)
      dimension
     :  x(nr),d0(nang*nsp),d2(na12*n12),
     :  vs(nang),vp(nang),vsum(nang),vdiff(nang),
     :  xsum(nsp),vlp(nsp),xdiff(n12),aaaa(nang*nsp),
     :  aaa(nang*nsp),kpvt(nsp),qraux(nsp),work(nsp),rsd(nsp)

      dimension
     :          aas(nang),aap(nang),aa1(na12),aa2(na12),
     :          alps(nang),alpp(nang),alp1(na12),alp2(na12),
     :          cfs6(nang),cfp6(nang),cfs8(nang),cfp8(nang),
     :          cf16(na12),cf26(na12),cf18(na12),cf28(na12),
     :          ccs(nang,4,nr),ccp(nang,4,nr),cc1(na12,4,nr),
     :          cc2(na12,4,nr),c1(4,nr),c2(4,nr),thet(nang)

      common /covvl/ vvl(17)
      common /coselb/ ibasty
      common /setup/ aas,aap,aa1,aa2,alps,alpp,alp1,alp2,
     :               cfs6,cfs8,cfp6,cfp8,ccs,ccp,cc1,cc2
***************************************************************

      data half, zero, one, two /0.5d0, 0.d0, 1.d0, 2.d0/

c     x where ab initio data available
      data x/4.50,4.75,5.0,5.25,5.5,5.75,6.0,
     : 6.25,6.5,6.75,7.0,7.25,7.5,7.75,8.0,8.25,8.5,8.75,
     : 9.0,9.25,9.5,9.75,10.0,10.25,10.5,10.75,11.0,11.25,
     : 11.50,11.75,12.0,13.0,14.0,16.0,18.0,20.0/
       data rmax /12.d0/
* coefficicients for d0 rotation matrices
* number of l expansion is same as number of angles
* stored (by column) for each of 10 angles [0 20 40 60 80 100 120 140 160 180]
* and for l=0:9
      data d0/
     : 1d0, 1d0, 1d0, 1d0, 1d0, 1d0, 1d0, 1d0, 1d0, 1d0, 1d0,
     : 9.3969262d-1, 7.6604445d-1, 5.0000001d-1, 1.7364819d-1,
     : -1.7364816d-1, -4.9999998d-1, -7.6604443d-1, -9.3969261d-1,
     : -1d0,1d0, 8.2453334d-1, 3.8023614d-1, -1.2499999d-1,
     : -4.5476946d-1, -4.5476947d-1, -1.2500002d-1, 3.8023610d-1,
     : 8.2453331d-1, 1d0,1d0, 6.6488474d-1, -2.5233323d-2,
     : -4.3750000d-1, -2.4738195d-1, 2.4738191d-1, 4.3750001d-1,
     : 2.5233373d-2, -6.6488469d-1, -1d0,1d0, 4.7497774d-1,
     : -3.1900434d-1, -2.8906251d-1, 2.6590160d-1, 2.6590163d-1,
     : -2.8906248d-1, -3.1900437d-1, 4.7497767d-1, 1d0,1d0,
     : 2.7149176d-1, -4.1968205d-1, 8.9843733d-2, 2.8101755d-1,
     : -2.8101752d-1, -8.9843784d-2, 4.1968205d-1, -2.7149167d-1,
     : -1d0,1d0, 7.1903012d-2, -3.2357074d-1, 3.2324218d-1,
     : -1.3212132d-1, -1.3212137d-1, 3.2324220d-1, -3.2357069d-1,
     : 7.1902917d-2, 1d0,1d0, -1.0722615d-1, -1.0060172d-1,
     : 2.2314455d-1, -2.8347993d-1, 2.8347991d-1, -2.2314450d-1,
     : 1.0060165d-1, 1.0722624d-1, -1d0,1d0, -2.5183942d-1,
     : 1.3862678d-1, -7.3638895d-2, 2.3307822d-2, 2.3307885d-2,
     : -7.3638959d-2, 1.3862685d-1, -2.5183950d-1, 1d0,1d0,
     : -3.5169654d-1, 2.9001294d-1, -2.6789855d-1, 2.5962717d-1,
     : -2.5962718d-1, 2.6789857d-1, -2.9001298d-1, 3.5169659d-1, -1d0/
* coefficicients for d2 rotation matrices
* stored (by column) for each of 8 angles [20 40 60 80 100 120 140 160]
* and for l=2:9
      data d2/
     : 7.1633967d-2, 2.5301754d-1, 4.5927933d-1, 5.9390715d-1,
     : 5.9390715d-1, 4.5927933d-1, 2.5301754d-1, 7.1633967d-2,
     : 1.5051848d-1, 4.3340069d-1, 5.1348990d-1, 2.3060769d-1,
     : -2.3060769d-1, -5.1348990d-1, -4.3340069d-1, -1.5051848d-1,
     : 2.3957418d-1, 5.0756736d-1, 2.2234765d-1, -3.0244624d-1,
     : -3.0244624d-1, 2.2234765d-1, 5.0756736d-1, 2.3957418d-1,
     : 3.2835759d-1, 4.3600553d-1, -1.6982082d-1, -2.7746877d-1,
     : 2.7746877d-1, 1.6982082d-1, -4.3600553d-1, -3.2835759d-1,
     : 4.0592179d-1, 2.3830028d-1, -3.4523418d-1, 1.5131756d-1,
     : 1.5131756d-1, -3.4523418d-1, 2.3830028d-1, 4.0592179d-1,
     : 4.6231022d-1, -1.3906540d-2, -1.9131358d-1, 2.8490318d-1,
     : -2.8490318d-1, 1.9131358d-1, 1.3906540d-2, -4.6231022d-1,
     : 4.8973053d-1, -2.2700359d-1, 1.1374299d-1, -3.5240961d-2,
     : -3.5240961d-2, 1.1374299d-1, -2.2700359d-1, 4.8973053d-1,
     : 4.8345441d-1, -3.2461587d-1, 2.7905801d-1, -2.6334950d-1,
     : 2.6334950d-1, -2.7905801d-1, 3.2461587d-1, -4.8345441d-1/
* cos of angle

       call pot_setup

*       thet(1)=  0.0
*       thet(2)= 20.0
*       thet(3)= 40.0
*       thet(4)= 60.0
*       thet(5)= 80.0
*       thet(6)= 100.0
*       thet(7)= 120.0
*       thet(8)= 140.0
*       thet(9)= 160.0
*       thet(10)= 180.0

*    determine Vs, Vp potentials at angles
      xmin=x(1)
      xmax=x(nr)
      rr=r*r
      rrr=rr*r
      r6=rrr*rrr
      r8=r6*rr

* for Vs and Vp
      do i = 1, nang
         if (r .lt. x(2)) then
           vs(i) = aas(i) * dexp (-alps(i) * r)
           vp(i) = aap(i) * dexp (-alpp(i) * r)
         else if (r .gt. x(nr-1)) then
           vs(i) = - cfs6(i) / r6  - cfs8(i) / r8
           vp(i) = - cfp6(i) / r6  - cfp8(i) / r8
         else
           do l = 1 , 4
            do j = 1, nr
             c1(l,j) = ccs(i,l,j)
             c2(l,j) = ccp(i,l,j)
            enddo
           enddo
          call splval (r,vs(i),x,c1,nr)
          call splval (r,vp(i),x,c2,nr)
         endif

       enddo

       do 15 i=1,nang
*        print*,thet(i),r,vs(i),vp(i)

              vsum(i)=half*(vs(i)+vp(i))
* don't compute vdiff for colinear geometries

                if (i.ne.1 .and. i.ne.nang) then
                  vdiff(i-1)=half*(vs(i)-vp(i))
                   if (r .gt. rmax) then
                     damp=-half*(tanh(3.d0*(r-rmax))-one)
                     vdiff(i-1)=vdiff(i-1)*damp
                  endif
*                  print*,i,thet(i),r,vdiff(i-1)
                endif
*          write(*,10)r,thet(i),vsum(i),vdiff(i-1)
*10        format(f6.2,2x,f6.2,2x,f16.8,1x,f16.8)
15        continue

* convert to hartree
      conv=1.d0/219474.6
      tol=1.e-10

* solve simultaneous equations for solutions
* first for Vsum
      call dcopy(nsp*nsp,d0,1,aaa,1)
      call dqrank(aaa,nsp,nsp,nsp,tol,kr,kpvt,qraux,work)
      call dqrlss(aaa,nsp,nsp,nsp,kr,vsum,xsum,rsd,kpvt,qraux)
      call dscal(nsp,conv,xsum,1)
      vv0=xsum(1)
      call dcopy(nsp-1,xsum(2),1,vvl,1)

* next for Viff
      call dcopy(n12*n12,d2,1,aaaa,1)
      call dqrank(aaaa,n12,n12,n12,tol,kr,kpvt,qraux,work)
      call dqrlss(aaaa,n12,n12,n12,kr,vdiff,xdiff,rsd,kpvt,qraux)
      call dscal(n12,conv,xdiff,1)
      call dcopy(n12,xdiff,1,vvl(nsp),1)

      return
      end

*23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
* ----------------------------------------------------------------------
      subroutine extpol(n,x,v,aa,alpha,coef6,coef8,il)
* ----------------------------------------------------------------------
*     obtain parameters for short and longe extrapolation
*     input :
*       n : number of data point
*       x(n) : r points of ab initio data
*       v(n) : ab initio potential at aan angle
*       il : if 1, then include long range
*            if 0, then long range pot is zero
*     output :
*       aa    : pre-expontial coeff
*       alpha : expontial coefficient
*       coef6 : long range coefficient

      implicit double precision (a-h,o-z)
      dimension x(n),v(n)
      data zero / 0.d0 /

      x1 = x(1)
      x2 = x(2)
      xn1 = x(n)
      xn2 = x(n-1)
      dx = x2 - x1

      xn12 = xn1 * xn1
      xn14 = xn12 * xn12
      xn16 = xn12 * xn14
      xn18 = xn14 * xn14

      xn22 = xn2 * xn2
      xn24 = xn22 * xn22
      xn26 = xn22 * xn24
      xn28 = xn24 * xn24


      v1 = v(1)
      v2 = v(2)
      vn1 = v(n)
      vn2 = v(n-1)
      alpha = dlog(v1/v2) / dx
      aa = v1 * dexp(alpha * x1)

      if (il.eq.0) then
         coef6=zero
         coef8=zero
      else

*     c6 = (r1^8 * v1 - r2^8 * v2)/(r2^2-r1^2)
*     c8 = -0.5 [c6*(r1^2 + r2^2) + r1^8*v1 + r2^8*v2]
*        = -c6*r1^2 - r1^8*v1


         coef6 = (xn18*vn1 - xn28*vn2)/(xn22-xn12)
         coef8 = - coef6*xn12 - xn18*vn1
      endif

      return
      end


*23456789 123456789 123456789 123456789 123456789 123456789 123456789 12

* ----------------------------------------------------------------------
      subroutine cubspl (tau,c,n,ibcbeg,ibcend)
* ----------------------------------------------------------------------

c The following two subroutines calculte
c the piecewise cubic spline interpolation.
c First one cubspl caslculate the polynomial coefficients
c Second polval evaluate the spline for each r from coefficients
c This is same as the spline in MATLAB
c Only nmax>3 and "not-a-knot" condition is used
c For reference see  page 57 in
c         "a practical guide to splines" by c. de boor, applied
c         mathematics series 27, springer, 1979.

      implicit double precision (a-h,o-z)
      dimension c(4,n),tau(n)

c     for ibcbeg and ibcend=0 not-a-knot condition

      if (ibcbeg .ne. 0 .or. ibcend .ne. 0) then
         print*,'use only for not-a-knot condition'
         stop
      endif

      l=n-1

      do m=2,n
         c(3,m)=tau(m)-tau(m-1)
         c(4,m)=(c(1,m)-c(1,m-1))/c(3,m)
      enddo
c12
      c(4,1)=c(3,3)
      c(3,1)=c(3,2)+c(3,3)
      c(2,1)=((c(3,2)+2.*c(3,1))*c(4,2)*c(3,3)+c(3,2)**2*c(4,3))/c(3,1)
c19
      do m=2,l
         g=-c(3,m+1)/c(4,m-1)
         c(2,m)=g*c(2,m-1)+3.*(c(3,m)*c(4,m+1)+c(3,m+1)*c(4,m))
         c(4,m)=g*c(3,m-1)+2.*(c(3,m)+c(3,m+1))
      enddo
c21
      g=c(3,n-1)+c(3,n)
      c(2,n)=((c(3,n)+2.*g)*c(4,n)*c(3,n-1)
     +          +c(3,n)**2*2*(c(1,n-1)-c(1,n-2))/c(3,n-1))/g
      g=-g/c(4,n-1)
      c(4,n)=c(3,n-1)

c29
      c(4,n)=g*c(3,n-1)+c(4,n)
      c(2,n)=(g*c(2,n-1)+c(2,n))/c(4,n)
c30
      do j=l,1,-1
         c(2,j)=(c(2,j)-c(3,j)*c(2,j+1))/c(4,j)
      enddo
c50
      do i=2,n
         dtau=c(3,i)
         divdf1=(c(1,i)-c(1,i-1))/dtau
         divdf3=c(2,i-1)+c(2,i)-2.*divdf1
         c(3,i-1)=2.*(divdf1-c(2,i-1)-divdf3)/dtau
         c(4,i-1)=(divdf3/dtau)*(6./dtau)
      enddo

      return
      end

*23456789 123456789 123456789 123456789 123456789 123456789 123456789 12

* ----------------------------------------------------------------------
      subroutine splval(r,f,tau,c,n)
* ----------------------------------------------------------------------

      implicit double precision (a-h,o-z)
      dimension c(4,n),tau(n)

      do i = 1 , n-1
        if ((r .ge. tau(i)) .and. (r .le. tau(i+1))) then
          h = r-tau(i)
          f = c(1,i)+h*(c(2,i)+h*(c(3,i)+h*c(4,i)/3.)/2.)
        endif
      enddo
      return
      end
