*  System:  ArH+ - H RCCSD(T)
*
*   calculation of potential energy curves by p.dagdigian
*   fitted to lam = 0:12 
*  
*   written by p. dagdigian
*   current revision date:  8-jan-2018
      include "common/syusr"
      include "common/bausr"
      include "common/ground"
* ------------------------------------------------------------------------
      subroutine driver
      implicit double precision (a-h,o-z)
      common /covvl/ vvl(12)
      include "common/parpot"
      econv=219474.6d0
      potnam='ArH+-H RCCSD(T)'
      print *, potnam
1     print *, 'R (bohr):'
      read (5, *, end=99) r
      call pot(vv0,r)
      if (r.le.0.d0) goto 99
*     vlm coefficient is returned in atomic units (hartree)
*     convert from atomic units for printout
      write (6, 100) vv0*econv, (econv*vvl(i), i=1,12)
100   format(13(1pe16.8))
      goto 1
99    rr=3.0d0
      dr=0.1d0
      open (unit=12,file='arhph_vlms.dat')
      write(12,109)
109   format(' %R/bohr V00  ...')
      do i=1,600
        call pot(vv0,rr)
        write (12,110) rr,vv0*econv, (econv*vvl(j),j=1,12)
110     format(f7.2,13(1pe16.8))
        rr = rr + dr
      enddo
      close(12)
      end
* --------------------------------------------------------------------------
      subroutine loapot(iunit,filnam)
* --------------------------------------------------------------------------
      implicit double precision (a-h,o-z)
      character*(*) filnam
      include "common/parbas"
      include "common/parpot" 
      common /conlam/ nlam, nlammx, lamnum(2)
      common /cosysi/ nscode, isicod, nterm
       potnam='ArH+-H RCCSD(T)'
      npot=1
      nterm=1
      lammin(1)=1
      lammax(1)=12
      mproj(1)=0
      ipotsy = 1
*
      ntv(1)=1
      ivcol(1,1)=0
      ivrow(1,1)=0
*  count number of anisotropic terms
      nlam = 0
      do il=lammin(1),lammax(1)
        nlam = nlam + 1
      enddo
      nlammx = nlam
      return
      end
* --------------------------------------------------------------------------
      subroutine pot (vv0, r)


*  subroutine to calculate the r-dependent coefficients in the
*  collision of a homonuclear diatomic with a structureless target
*  in units of hartree for energy and bohr for distance

*  on return:
*  vv0 contains the isotropic term (n=0) in the potential
*  the coefficients for each angular term in the coupling potential
*  [ vvl(i) for i = 1, nlam ] are returned in common block /covvl/

*  variable in common block /conlam/
*    nlammx:    the maximum number of anisotropic terms
*    nlam:      the total number of angular coupling terms
*  variable in common block /covvl/
*    vvl        array to store r-dependence of each angular term in the
*               potential
* 
* author:  paul dagdigian
* latest revision date:  8-jan-2018
* ----------------------------------------------------------------------
      implicit double precision (a-h,o-z)
      logical ljunk, ihomo, csflag, lljunk
      include "common/parbas"
      dimension v(13)
      dimension csplin(33,13)
      dimension rr(33), vl(429),vec(33)
      common /colpar/ ljunk(5),csflag,lljunk(2),ihomo
      common /covvl/ vvl(12)
*
# r values= 33
      data rr /
     +  3.000,  3.250,  3.500,  3.750,  4.000,
     +  4.250,  4.500,  4.750,  5.000,  5.250,
     +  5.500,  5.750,  6.000,  6.250,  6.500,
     +  6.750,  7.000,  7.250,  7.500,  7.750,
     +  8.000,  8.500,  9.000,  9.500, 10.000,
     + 10.500, 11.000, 11.500, 12.000, 13.000,
     + 14.000, 15.000, 20.000 /
#*  values of the vlam coefficients
      data vl /  
     +  1.4832786e+04,  9.9152924e+03,  6.4774294e+03,  4.0773481e+03,
     +  2.4189272e+03,  1.2948890e+03,  5.5444884e+02,  8.5693907e+01,
     + -1.9455579e+02, -3.4743613e+02, -4.1705164e+02, -4.3450351e+02,
     + -4.2115199e+02, -3.9120897e+02, -3.5380824e+02, -3.1453606e+02,
     + -2.7661002e+02, -2.4169014e+02, -2.1048567e+02, -1.8312326e+02,
     + -1.5942491e+02, -1.2161035e+02, -9.3947835e+01, -7.3651671e+01,
     + -5.8585241e+01, -4.7235372e+01, -3.8547596e+01, -3.1800072e+01,
     + -2.6487275e+01, -1.8848337e+01, -1.3799584e+01, -1.0353323e+01,
     + -3.1811267e+00, 
     + -4.4034633e+03, -1.7184159e+03, -4.4302390e+02,  1.7256732e+02,
     +  4.7421927e+02,  6.1561803e+02,  6.6667423e+02,  6.6289952e+02,
     +  6.2547730e+02,  5.6876628e+02,  5.0301014e+02,  4.3538772e+02,
     +  3.7063329e+02,  3.1154122e+02,  2.5946237e+02,  2.1471479e+02,
     +  1.7699580e+02,  1.4563808e+02,  1.1984073e+02,  9.8765303e+01,
     +  8.1626902e+01,  5.6463590e+01,  3.9888006e+01,  2.8854744e+01,
     +  2.1373500e+01,  1.6180913e+01,  1.2473514e+01,  9.7657581e+00,
     +  7.7511103e+00,  5.0482840e+00,  3.4092988e+00,  2.3757549e+00,
     +  5.4174074e-01, 
     +  2.0944129e+03, -2.5868568e+02, -1.1653293e+03, -1.4509583e+03,
     + -1.4755648e+03, -1.3901373e+03, -1.2579367e+03, -1.1077040e+03,
     + -9.5463556e+02, -8.0782500e+02, -6.7290682e+02, -5.5302576e+02,
     + -4.4944544e+02, -3.6200290e+02, -2.8960185e+02, -2.3059654e+02,
     + -1.8310746e+02, -1.4525314e+02, -1.1529866e+02, -9.1706532e+01,
     + -7.3182346e+01, -4.7257889e+01, -3.1233226e+01, -2.1201608e+01,
     + -1.4805548e+01, -1.0619180e+01, -7.7887445e+00, -5.8211465e+00,
     + -4.4181873e+00, -2.6529622e+00, -1.6622898e+00, -1.0766197e+00,
     + -1.8586932e-01, 
     + -8.0305193e+03, -3.2939632e+03, -1.1170704e+03, -1.2104658e+02,
     +  3.2818221e+02,  5.1637301e+02,  5.7355954e+02,  5.6236090e+02,
     +  5.1584727e+02,  4.5308518e+02,  3.8555799e+02,  3.2017815e+02,
     +  2.6078817e+02,  2.0917923e+02,  1.6578761e+02,  1.3020659e+02,
     +  1.0160133e+02,  7.8945040e+01,  6.1190352e+01,  4.7401622e+01,
     +  3.6754313e+01,  2.2271274e+01,  1.3731968e+01,  8.6764234e+00,
     +  5.6532287e+00,  3.8028046e+00,  2.6420137e+00,  1.8714295e+00,
     +  1.3487284e+00,  7.3838133e-01,  4.2378254e-01,  2.5269225e-01,
     +  3.4375368e-02, 
     +  7.0145658e+03,  2.3301558e+03,  3.8888283e+02, -3.6921362e+02,
     + -6.2362429e+02, -6.6655050e+02, -6.2279627e+02, -5.4640657e+02,
     + -4.6165388e+02, -3.7980831e+02, -3.0601116e+02, -2.4232867e+02,
     + -1.8910102e+02, -1.4578075e+02, -1.1125914e+02, -8.4256747e+01,
     + -6.3448518e+01, -4.7606598e+01, -3.5652252e+01, -2.6691980e+01,
     + -2.0004634e+01, -1.1321758e+01, -6.5104493e+00, -3.8174519e+00,
     + -2.3002139e+00, -1.4462411e+00, -9.4567362e-01, -6.3494655e-01,
     + -4.3736265e-01, -2.2116435e-01, -1.1806265e-01, -6.6581804e-02,
     + -7.2275961e-03, 
     + -8.5345211e+03, -3.3791817e+03, -1.1766040e+03, -2.4636195e+02,
     +  1.3019624e+02,  2.6483105e+02,  2.9356753e+02,  2.7672127e+02,
     +  2.4192451e+02,  2.0222823e+02,  1.6385184e+02,  1.2959398e+02,
     +  1.0053256e+02,  7.6738322e+01,  5.7796500e+01,  4.3087196e+01,
     +  3.1864831e+01,  2.3428914e+01,  1.7180281e+01,  1.2574067e+01,
     +  9.2080048e+00,  4.9688829e+00,  2.7149521e+00,  1.4970096e+00,
     +  8.3680401e-01,  4.8089304e-01,  2.8276793e-01,  1.7328319e-01,
     +  1.1472504e-01,  5.5116193e-02,  2.7541535e-02,  1.3506611e-02,
     +  3.7929742e-03, 
     +  9.8591910e+03,  4.2026271e+03,  1.7666022e+03,  6.9785016e+02,
     +  2.2569032e+02,  1.9645399e+01, -6.4994026e+01, -9.3292609e+01,
     + -9.5551192e+01, -8.6386826e+01, -7.3073693e+01, -5.9189621e+01,
     + -4.6468192e+01, -3.5587527e+01, -2.6741598e+01, -1.9793252e+01,
     + -1.4473594e+01, -1.0505710e+01, -7.5841025e+00, -5.4533372e+00,
     + -3.9170136e+00, -2.0290157e+00, -1.0645183e+00, -5.6527744e-01,
     + -3.0038240e-01, -1.6080520e-01, -9.0006271e-02, -5.4885214e-02,
     + -3.3552869e-02, -8.0308123e-03, -7.1419796e-03, -3.8623314e-03,
     +  2.4696663e-03, 
     + -9.1615650e+03, -3.8355445e+03, -1.6599354e+03, -7.2352077e+02,
     + -3.0603038e+02, -1.1563178e+02, -2.8552449e+01,  9.8659916e+00,
     +  2.4831942e+01,  2.8475377e+01,  2.6859470e+01,  2.3095267e+01,
     +  1.8778910e+01,  1.4678025e+01,  1.1145800e+01,  8.2759172e+00,
     +  6.0396236e+00,  4.3590111e+00,  3.1092275e+00,  2.1987340e+00,
     +  1.5547212e+00,  7.6653020e-01,  3.8999051e-01,  1.9969063e-01,
     +  9.5534693e-02,  4.9500685e-02,  2.5544356e-02,  2.3754098e-02,
     +  1.2542490e-02, -8.4228435e-04,  3.0929926e-03,  1.3969874e-03,
     + -1.0888677e-03, 
     +  7.6238024e+03,  3.1117035e+03,  1.3410780e+03,  5.9897040e+02,
     +  2.7197592e+02,  1.2197605e+02,  5.1167159e+01,  1.7439501e+01,
     +  1.7380618e+00, -5.0053838e+00, -7.2571559e+00, -7.3566406e+00,
     + -6.5051053e+00, -5.3387026e+00, -4.1856023e+00, -3.1683975e+00,
     + -2.3411910e+00, -1.6909852e+00, -1.1983402e+00, -8.3905810e-01,
     + -5.8892987e-01, -2.7608232e-01, -1.2916212e-01, -6.9514444e-02,
     + -3.3970932e-02, -1.3204512e-02, -2.0428957e-03, -3.5795420e-03,
     +  5.4595988e-03,  3.3356030e-03, -1.1924413e-03, -3.5952598e-04,
     +  1.6239484e-04, 
     + -7.0776608e+03, -2.6183277e+03, -1.0574900e+03, -4.5578004e+02,
     + -2.0590516e+02, -9.5610099e+01, -4.4438939e+01, -1.9827820e+01,
     + -7.8263186e+00, -2.0442741e+00,  5.6986362e-01,  1.5826504e+00,
     +  1.7769120e+00,  1.6471771e+00,  1.3790774e+00,  1.0812638e+00,
     +  8.2178922e-01,  6.0445382e-01,  4.3564411e-01,  3.1249604e-01,
     +  2.0975186e-01,  1.0214927e-01,  4.2565747e-02,  2.4266948e-02,
     +  1.3714789e-02,  4.0605156e-03,  5.3853197e-03, -1.7614240e-03,
     + -2.4485699e-03,  1.4108860e-03,  3.7309909e-03, -4.2055425e-03,
     +  2.2099405e-03, 
     +  5.7976403e+03,  1.9832551e+03,  7.5088657e+02,  3.0818561e+02,
     +  1.3502098e+02,  6.2191527e+01,  2.9552288e+01,  1.4131875e+01,
     +  6.5739365e+00,  2.8030889e+00,  9.3488686e-01,  6.9566210e-02,
     + -2.9444590e-01, -3.8927833e-01, -3.7636841e-01, -3.1271653e-01,
     + -2.4972553e-01, -1.9241014e-01, -1.4666673e-01, -1.0903589e-01,
     + -7.0995857e-02, -3.5722940e-02, -1.5632414e-02, -6.0949358e-03,
     + -4.4264766e-03, -6.7948824e-03, -4.5864042e-03, -3.2198945e-03,
     + -4.1973737e-04, -5.4360016e-03,  1.5574604e-03,  2.1424178e-03,
     + -2.4080438e-03, 
     + -7.5474937e+03, -2.1984631e+03, -7.2530599e+02, -2.6466734e+02,
     + -1.0529688e+02, -4.5142671e+01, -2.0586424e+01, -9.7979446e+00,
     + -4.7594163e+00, -2.2995237e+00, -1.0448620e+00, -4.0660963e-01,
     + -9.3593604e-02,  3.3636165e-02,  7.9138326e-02,  8.2944387e-02,
     +  6.6945395e-02,  5.2806678e-02,  4.2299442e-02,  3.2686234e-02,
     +  2.5546369e-02,  1.0268259e-02,  7.8942803e-03, -1.2179593e-03,
     +  5.5353842e-04,  3.1991363e-03,  1.0812602e-03,  1.3214725e-03,
     +  1.3600892e-03,  1.1368620e-03, -3.8296731e-03,  5.7603063e-03,
     + -7.1189450e-03, 
     +  6.2553309e+03,  1.6842591e+03,  5.1473067e+02,  1.7426301e+02,
     +  6.4521635e+01,  2.5923986e+01,  1.1240962e+01,  5.1785762e+00,
     +  2.4977760e+00,  1.2441054e+00,  6.1277486e-01,  2.8571292e-01,
     +  1.1821628e-01,  2.3872134e-02, -8.2548154e-03, -1.5710506e-02,
     + -1.9094393e-02, -1.1796441e-02, -4.9495617e-03, -1.0712442e-02,
     + -1.0554261e-02, -3.6339151e-03, -3.6339186e-03,  2.9778722e-03,
     + -5.1821266e-03,  1.6910940e-03, -2.9094370e-03,  3.2936308e-03,
     + -3.5020209e-03, -1.8982127e-03,  4.3925508e-04,  3.4871059e-03,
     + -1.5380621e-03 /
*
* spline fit
      if (ifirst .eq. 0) then
* spline fit of the vl coefficients
         ind=1
         do ilam=1,13
           call dcopy(33,vl(ind),1,vec,1)
*    evaluate derivative at first point
           der1=(vec(2)-vec(1))/(rr(2)-rr(1))
           call dspline(rr,vec,33,der1,0d0,csplin(1,ilam))
           ind = ind + 33
         enddo
         ifirst = 1
       end if
* r^-4 fit to v0 at R = 15 bohr for isotropic part of potential
       c4 = -5.2414e+05
* r^-5 fit to vvl(2) at R = 15 bohr for lambda=1 term
       c5 = 1.8041e+06
* r^-6 fit to vvl(3) at R = 15 bohr for lambda=2 term
       c6 = -1.2263e+07
* switching function for long-range
       switch_lr=0.5*(tanh(0.5*(r - 18.d0)) + 1.d0)
* determine splined coefficients at R=r
       ind=1
       do ilam=1,13
         call dcopy(37,vl(ind),1,vec,1)
         call dsplint(rr,vec,csplin(1,ilam),33,r,vvx)
* kill anisotropic terms at large R
         vvx = (1.d0 - switch_lr)*vvx
         if (ilam.eq.1) then
* merge with asymptotic form for isotropic part
            vvx = vvx + switch_lr*c4/(r**4)
         endif
         if (ilam.eq.2) then
* merge with asymptotic form for lambda=1 term
            vvx = vvx + switch_lr*c5/(r**5)
         endif
         if (ilam.eq.2) then
* merge with asymptotic form for lambda=2 term
            vvx = vvx + switch_lr*c6/(r**6)
         endif
         v(ilam)=vvx
         call dcopy(33,vl(ind),1,vec,1)
         ind = ind + 33
       enddo
       call dcopy(12,v(2),1,vvl(1),1)
* convert to hartree
       econv=1.d0/219474.6d0
       call dscal(12,econv,vvl,1)
* isotropic term 
       vv0 = v(1)*econv
*
       return
       end
*===========================eof===============================
